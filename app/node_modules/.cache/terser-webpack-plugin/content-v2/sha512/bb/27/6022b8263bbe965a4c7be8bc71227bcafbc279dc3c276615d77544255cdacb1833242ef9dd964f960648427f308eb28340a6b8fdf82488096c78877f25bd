{"map":"{\"version\":3,\"sources\":[\"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\serviceWorker.js\",\"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"react_default\",\"a\",\"createElement\",\"App_default\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"2JAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,EAAAA,EAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MAASG,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"// In production, we register a service worker to serve assets from local cache.\\r\\n\\r\\n// This lets the app load faster on subsequent visits in production, and gives\\r\\n// it offline capabilities. However, it also means that developers (and users)\\r\\n// will only see deployed updates on the \\\"N+1\\\" visit to a page, since previously\\r\\n// cached resources are updated in the background.\\r\\n\\r\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\r\\n// This link also includes instructions on opting out of this behavior.\\r\\n\\r\\nconst isLocalhost = Boolean(\\r\\n  window.location.hostname === 'localhost' ||\\r\\n    // [::1] is the IPv6 localhost address.\\r\\n    window.location.hostname === '[::1]' ||\\r\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\r\\n    window.location.hostname.match(\\r\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\r\\n    )\\r\\n);\\r\\n\\r\\nexport function register(config) {\\r\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\r\\n    // The URL constructor is available in all browsers that support SW.\\r\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\r\\n    if (publicUrl.origin !== window.location.origin) {\\r\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\r\\n      // from what our page is served on. This might happen if a CDN is used to\\r\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    window.addEventListener('load', () => {\\r\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\r\\n\\r\\n      if (isLocalhost) {\\r\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\r\\n        checkValidServiceWorker(swUrl, config);\\r\\n\\r\\n        // Add some additional logging to localhost, pointing developers to the\\r\\n        // service worker/PWA documentation.\\r\\n        navigator.serviceWorker.ready.then(() => {\\r\\n          console.log(\\r\\n            'This web app is being served cache-first by a service ' +\\r\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\r\\n          );\\r\\n        });\\r\\n      } else {\\r\\n        // Is not local host. Just register service worker\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction registerValidSW(swUrl, config) {\\r\\n  navigator.serviceWorker\\r\\n    .register(swUrl)\\r\\n    .then(registration => {\\r\\n      registration.onupdatefound = () => {\\r\\n        const installingWorker = registration.installing;\\r\\n        installingWorker.onstatechange = () => {\\r\\n          if (installingWorker.state === 'installed') {\\r\\n            if (navigator.serviceWorker.controller) {\\r\\n              // At this point, the old content will have been purged and\\r\\n              // the fresh content will have been added to the cache.\\r\\n              // It's the perfect time to display a \\\"New content is\\r\\n              // available; please refresh.\\\" message in your web app.\\r\\n              console.log('New content is available; please refresh.');\\r\\n\\r\\n              // Execute callback\\r\\n              if (config.onUpdate) {\\r\\n                config.onUpdate(registration);\\r\\n              }\\r\\n            } else {\\r\\n              // At this point, everything has been precached.\\r\\n              // It's the perfect time to display a\\r\\n              // \\\"Content is cached for offline use.\\\" message.\\r\\n              console.log('Content is cached for offline use.');\\r\\n\\r\\n              // Execute callback\\r\\n              if (config.onSuccess) {\\r\\n                config.onSuccess(registration);\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        };\\r\\n      };\\r\\n    })\\r\\n    .catch(error => {\\r\\n      console.error('Error during service worker registration:', error);\\r\\n    });\\r\\n}\\r\\n\\r\\nfunction checkValidServiceWorker(swUrl, config) {\\r\\n  // Check if the service worker can be found. If it can't reload the page.\\r\\n  fetch(swUrl)\\r\\n    .then(response => {\\r\\n      // Ensure service worker exists, and that we really are getting a JS file.\\r\\n      if (\\r\\n        response.status === 404 ||\\r\\n        response.headers.get('content-type').indexOf('javascript') === -1\\r\\n      ) {\\r\\n        // No service worker found. Probably a different app. Reload the page.\\r\\n        navigator.serviceWorker.ready.then(registration => {\\r\\n          registration.unregister().then(() => {\\r\\n            window.location.reload();\\r\\n          });\\r\\n        });\\r\\n      } else {\\r\\n        // Service worker found. Proceed as normal.\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    })\\r\\n    .catch(() => {\\r\\n      console.log(\\r\\n        'No internet connection found. App is running in offline mode.'\\r\\n      );\\r\\n    });\\r\\n}\\r\\n\\r\\nexport function unregister() {\\r\\n  if ('serviceWorker' in navigator) {\\r\\n    navigator.serviceWorker.ready.then(registration => {\\r\\n      registration.unregister();\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\",\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\nimport './index.css';\\r\\nimport App from './App';\\r\\nimport * as serviceWorker from './serviceWorker';\\r\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\r\\n\\r\\nReactDOM.render(<App />, document.getElementById('root'));\\r\\n\\r\\n// If you want your app to work offline and load faster, you can change\\r\\n// unregister() to register() below. Note this comes with some pitfalls.\\r\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\r\\nserviceWorker.unregister();\\r\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,r,n){\"use strict\";n.r(r);var a=n(0),s=n.n(a),l=n(2),t=n.n(l),o=(n(9),n(3)),i=n.n(o);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(11);t.a.render(s.a.createElement(i.a,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},3:function(e,r){throw new Error(\"Module build failed (from ./node_modules/react-scripts/node_modules/babel-loader/lib/index.js):\\nSyntaxError: C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\App.js: JSX value should be either an expression or a quoted JSX text (167:23)\\n\\n  165 |       <Router>\\n  166 |         <Switch>\\n> 167 |           <Route path= exact={true} component={Home}/>\\n      |                        ^\\n  168 | \\n  169 |           <Route path={`$/regions`} exact={true} component={RegionList}/>\\n  170 |           <Route path='/regions/:id' component={RegionEdit}/>\\n    at _class.raise (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3939:15)\\n    at _class.jsxParseAttributeValue (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3469:22)\\n    at _class.jsxParseAttribute (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3512:46)\\n    at _class.jsxParseOpeningElementAfterName (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3532:30)\\n    at _class.jsxParseOpeningElementAt (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3525:19)\\n    at _class.jsxParseElementAt (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3557:33)\\n    at _class.jsxParseElementAt (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3573:34)\\n    at _class.jsxParseElementAt (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3573:34)\\n    at _class.jsxParseElement (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3626:19)\\n    at _class.parseExprAtom (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:3633:21)\\n    at _class.parseExprSubscripts (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:5924:21)\\n    at _class.parseMaybeUnary (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:5903:21)\\n    at _class.parseExprOps (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:5812:21)\\n    at _class.parseMaybeConditional (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:5784:21)\\n    at _class.parseMaybeAssign (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:5731:21)\\n    at _class.parseMaybeAssign (C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\parser\\\\lib\\\\index.js:2549:57)\")},4:function(e,r,n){e.exports=n(13)},9:function(e,r,n){}},[[4,2,1]]]);","extractedComments":[]}