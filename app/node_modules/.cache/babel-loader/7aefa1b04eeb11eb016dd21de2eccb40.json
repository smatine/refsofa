{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\SubnetGroupEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { API_BASE_URL } from './constants';\n\nvar SubnetGroupEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SubnetGroupEdit, _Component);\n\n  function SubnetGroupEdit(props) {\n    var _this;\n\n    _classCallCheck(this, SubnetGroupEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SubnetGroupEdit).call(this, props));\n    _this.emptyItem = {\n      name: '',\n      account: {},\n      accounts: {},\n      accountId: '',\n      type: '',\n      typeId: '',\n      text: '',\n      vpc: {},\n      vpcs: {},\n      vpcId: '',\n      subnetss: {},\n      subnets: [],\n      subnetId: [],\n      touched: {\n        name: false,\n        accountId: false,\n        vpcId: false,\n        subnetId: false,\n        typeId: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SubnetGroupEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var subnetGroup, item, values, _subnetGroup;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 22;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/subnetGroups/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                subnetGroup = _context.sent;\n                subnetGroup.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  subnetId: false,\n                  typeId: false\n                };\n                this.setState({\n                  item: subnetGroup\n                });\n                _context.next = 10;\n                return fetch(API_BASE_URL + '/accounts/' + subnetGroup.account.id + '/vpcs').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.vpcs = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 10:\n                _context.next = 12;\n                return fetch(API_BASE_URL + '/vpcs/' + subnetGroup.vpc.id + '/subnets').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.subnetss = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 12:\n                item = _objectSpread({}, this.state.item);\n                item.vpcId = subnetGroup.vpc.id;\n                item.accountId = subnetGroup.account.id;\n                item.typeId = subnetGroup.type;\n                values = [];\n                item.subnets.map(function (s) {\n                  values.push({\n                    \"id\": s.id\n                  });\n                });\n                item.subnets = values;\n                this.setState({\n                  item: item\n                });\n                _context.next = 25;\n                break;\n\n              case 22:\n                _subnetGroup = {\n                  name: '',\n                  account: {},\n                  accounts: {},\n                  accountId: '',\n                  type: '',\n                  typeId: '',\n                  text: '',\n                  vpc: {},\n                  vpcs: {},\n                  vpcId: '',\n                  subnets: [],\n                  subnetss: {},\n                  subnetId: [],\n                  touched: {\n                    name: false,\n                    accountId: false,\n                    vpcId: false,\n                    subnetId: false,\n                    typeId: false\n                  }\n                };\n                _subnetGroup.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  subnetId: false,\n                  typeId: false\n                };\n                this.setState({\n                  item: _subnetGroup\n                });\n\n              case 25:\n                _context.next = 27;\n                return fetch(API_BASE_URL + '/accounts').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.accounts = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this3 = this;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      }); //item.isSameVpc = true;\n      //console.log(\"-----------------------------\");\n\n      if (name === 'subnetId') {\n        var options = event.target.options;\n        var values = [];\n\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (options[i].selected) {\n            //values.push({\"id\": options[i].value});\n            //values.push(item.subnetss\n            if (item.subnetss && item.subnetss.length) {\n              item.subnetss.map(function (s) {\n                if (s.id == options[i].value) {\n                  //console.log( s.id + \"===\" + options[i].value);\n                  values.push({\n                    \"id\": s.id\n                  });\n                }\n              });\n            } //console.log(i + \" \" + options[i].value);\n\n          }\n        }\n\n        item.subnets = values;\n        this.setState({\n          item: item\n        });\n      }\n\n      if (name === 'accountId') {\n        fetch(API_BASE_URL + '/accounts/' + item.accountId + '/vpcs').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          var item = _objectSpread({}, _this3.state.item);\n\n          item.vpcs = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n        item.vpcId = '';\n        item.subnetId = '';\n        item.subnets = [];\n        item.subnetss = [];\n      }\n\n      if (name === 'vpcId') {\n        fetch(API_BASE_URL + '/vpcs/' + item.vpcId + '/subnets').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          item.subnetss = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist, values;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  name: true,\n                  accountId: true,\n                  vpcId: true,\n                  subnetId: true,\n                  typeId: true\n                };\n                errors = this.validate(item.name, item.vpcId, item.subnetId, item.typeId, item.accountId);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = API_BASE_URL + '/subnetGroups';\n                item.vpc = {\n                  id: item.vpcId\n                };\n                item.account = {\n                  id: item.accountId\n                };\n                item.type = item.typeId;\n                values = [];\n                item.rdss = [];\n\n                if (item.rdss && item.rdss.length) {\n                  item.rdss.map(function (s) {\n                    values.push({\n                      \"id\": s.id\n                    });\n                  });\n                  item.rdss = values;\n                }\n\n                values = [];\n\n                if (item.efss && item.efss.length) {\n                  item.efss.map(function (s) {\n                    values.push({\n                      \"id\": s.id\n                    });\n                  });\n                  item.efss = values;\n                }\n\n                values = [];\n\n                if (item.elasticcaches && item.elasticcaches.length) {\n                  item.elasticcaches.map(function (s) {\n                    values.push({\n                      \"id\": s.id\n                    });\n                  });\n                  item.elasticcaches = values;\n                }\n\n                values = [];\n\n                if (item.elasticsearchs && item.elasticsearchs.length) {\n                  item.elasticsearchs.map(function (s) {\n                    values.push({\n                      \"id\": s.id\n                    });\n                  });\n                  item.elasticsearchs = values;\n                } //item.subnets=[{\"id\": 1000}, {\"id\": 1001}];\n                //item.subnets={};\n                //\n\n\n                if (item.subnets && item.subnets.length) item.subnets.map(function (s) {\n                  console.log(\"subnet:\" + s.id);\n                }); //return;\n\n                _context2.next = 24;\n                return fetch(item.id ? API_BASE_URL + '/vpcs/' + item.vpc.id + '/subnetGroups/' + item.id : API_BASE_URL + '/vpcs/' + item.vpc.id + '/subnetGroups', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 24:\n                this.props.history.push(hist);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(name, vpcId, subnetId, typeId, accountId) {\n      var errors = {\n        name: '',\n        accountId: '',\n        vpcId: '',\n        subnetId: '',\n        typeId: ''\n      };\n\n      if (this.state.item.touched.name && name.length === 0) {\n        errors.name = 'Name should not be null';\n        return errors;\n      } else if (this.state.item.touched.accountId && accountId.length === 0) {\n        errors.accountId = 'accountId should not be null';\n        return errors;\n      } else if (this.state.item.touched.typeId && typeId.length === 0) {\n        errors.typeId = 'Type should not be null';\n        return errors;\n      } else if (this.state.item.touched.vpcId && vpcId.length === 0) {\n        errors.vpcId = 'Vpc should not be null';\n        return errors;\n      } else if (this.state.item.touched.subnetId && subnetId && this.state.item.subnets.length === 0) {\n        errors.subnetId = 'Add subnets to cover at least 2 availability zones.';\n        return errors;\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, item.id ? 'Edit subnetGroup' : 'Add subnetGroup');\n      var errors = this.validate(item.name, item.vpcId, item.subnetId, item.typeId, item.accountId);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = API_BASE_URL + \"/subnetGroups\";\n      var optas = [];\n\n      if (item.accounts && item.accounts.length) {\n        item.accounts.map(function (s) {\n          optas.push(React.createElement(\"option\", {\n            key: s.id,\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333\n            },\n            __self: this\n          }, s.id, \" \", s.numAccount));\n        });\n      }\n\n      var account = item.accountId || '';\n      item.accountId = account;\n      var opts = [];\n\n      if (item.vpcs && item.vpcs.length) {\n        item.vpcs.map(function (s) {\n          opts.push(React.createElement(\"option\", {\n            key: s.id,\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 342\n            },\n            __self: this\n          }, s.id, \" \", s.name));\n        });\n      }\n\n      var vpc = item.vpcId || '';\n      item.vpcId = vpc;\n      var optss = [];\n\n      if (item.subnetss && item.subnetss.length) {\n        item.subnetss.map(function (s) {\n          var isSelected = false;\n          if (item.subnets && item.subnets.length) item.subnets.map(function (ss) {\n            if (s.id == ss.id) isSelected = true;\n          });\n          optss.push(React.createElement(\"option\", {\n            key: s.id,\n            value: s.id,\n            selected: isSelected,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 356\n            },\n            __self: this\n          }, s.id, \" \", s.name, \" \", s.az.name));\n        });\n      }\n\n      var sub = item.subnetId || {};\n      item.subnetId = sub;\n      var tt = item.typeId || '';\n      item.typeId = tt;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, \"Name (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: item.name || '',\n        placeholder: \"Enter name\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('name'),\n        autoComplete: \"name\",\n        valid: errors.name === '',\n        invalid: errors.name !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, errors.name)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"accountId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, \"Account (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"accountId\",\n        id: \"accountId\",\n        value: account,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('accountId'),\n        valid: errors.accountId === '',\n        invalid: errors.accountId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, \"Choose\"), optas), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, errors.accountId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"typeId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \"Type (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"typeId\",\n        id: \"typeId\",\n        value: tt,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('typeId'),\n        valid: errors.typeId === '',\n        invalid: errors.typeId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, \"Choose\"), React.createElement(\"option\", {\n        value: \"RDS\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, \"RDS\"), React.createElement(\"option\", {\n        value: \"EFS\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, \"EFS\"), React.createElement(\"option\", {\n        value: \"ECC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, \"Elastic cache\"), React.createElement(\"option\", {\n        value: \"ELK\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, \"Elastic search\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, errors.typeId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"vpcId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, \"Vpcs (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"vpcId\",\n        id: \"vpcId\",\n        value: vpc,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('vpcId'),\n        valid: errors.vpcId === '',\n        invalid: errors.vpcId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, \"Choose\"), opts), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, errors.vpcId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"subnetId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, \"Subnets (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"subnetId\",\n        id: \"subnetId\"\n        /*value={\"1001\",\"1002\"}*/\n        ,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('subnetId'),\n        multiple: true,\n        valid: errors.subnetId === '',\n        invalid: errors.subnetId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      }, \"Choose\"), optss), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, errors.subnetId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"text\",\n        id: \"text\",\n        value: item.text || '',\n        onChange: this.handleChange,\n        autoComplete: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return SubnetGroupEdit;\n}(Component);\n\nexport default withRouter(SubnetGroupEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\SubnetGroupEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","AppNavbar","API_BASE_URL","SubnetGroupEdit","props","emptyItem","name","account","accounts","accountId","type","typeId","text","vpc","vpcs","vpcId","subnetss","subnets","subnetId","touched","handleBlur","field","evt","item","state","setState","handleChange","bind","handleSubmit","match","params","id","fetch","json","subnetGroup","then","result","jsonResult","values","map","s","push","event","target","value","options","i","l","length","selected","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","rdss","efss","elasticcaches","elasticsearchs","console","log","method","headers","body","JSON","stringify","history","title","canc","optas","numAccount","opts","optss","isSelected","ss","az","sub","tt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { API_BASE_URL } from './constants';\r\n\r\nclass SubnetGroupEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n    account: {},\r\n    accounts: {},\r\n    accountId : '',\r\n    type: '',\r\n    typeId: '',\r\n    text: '',\r\n\t  vpc: {},\r\n    vpcs: {},\r\n  \tvpcId : '',\r\n    subnetss: {},\r\n    subnets: [],\r\n    subnetId: [],\r\n    touched: {\r\n      name: false,\r\n      accountId: false,\r\n      vpcId: false,\r\n      subnetId: false,\r\n      typeId: false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const subnetGroup = await (await fetch(`${API_BASE_URL}/subnetGroups/${this.props.match.params.id}`)).json();\r\n      \r\n     \r\n     subnetGroup.touched = {\r\n        name: false,\r\n        accountId: false,\r\n        vpcId: false,\r\n        subnetId: false,\r\n        typeId: false\r\n      };\r\n      this.setState({item: subnetGroup});\r\n      \r\n      await fetch(API_BASE_URL + '/accounts/' + (subnetGroup.account.id) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n\r\n      await (await fetch(API_BASE_URL + '/vpcs/' + (subnetGroup.vpc.id) + '/subnets',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          let item = {...this.state.item};\r\n          item.subnetss = jsonResult;\r\n          this.setState({item: item});\r\n      }));\r\n\r\n      let item = {...this.state.item};\r\n      item.vpcId = subnetGroup.vpc.id;\r\n      item.accountId = subnetGroup.account.id;\r\n      item.typeId = subnetGroup.type;\r\n      \r\n      var values = [];\r\n      item.subnets.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.subnets = values;\r\n      this.setState({item: item});\r\n      \r\n    }\r\n    else {\r\n      const subnetGroup = {\r\n        name: '',\r\n        account: {},\r\n        accounts: {},\r\n        accountId : '',\r\n        type: '',\r\n        typeId:'',\r\n        text: '',\r\n        vpc: {},\r\n        vpcs: {},\r\n        vpcId : '',\r\n        subnets: [],\r\n        subnetss: {},\r\n        subnetId: [],\r\n        touched: {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          subnetId: false,\r\n          typeId: false\r\n        }\r\n      };\r\n      subnetGroup.touched = {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          subnetId: false,\r\n          typeId: false\r\n      };\r\n      this.setState({item: subnetGroup});\r\n    }\r\n    \r\n    await fetch(API_BASE_URL + '/accounts',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.accounts = jsonResult;\r\n      this.setState({item: item});\r\n    });\r\n\r\n    /*await fetch('/vpcs',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.vpcs = jsonResult;\r\n      this.setState({item: item});\r\n    })*/\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n\r\n    //item.isSameVpc = true;\r\n    //console.log(\"-----------------------------\");\r\n    if(name === 'subnetId')\r\n    {\r\n      var options = event.target.options;\r\n      var values = [];\r\n      for (var i = 0, l = options.length; i < l; i++) {\r\n        if (options[i].selected) {\r\n          //values.push({\"id\": options[i].value});\r\n          //values.push(item.subnetss\r\n            if(item.subnetss && item.subnetss.length){\r\n                item.subnetss.map(s => { \r\n                  \r\n                  if(s.id == options[i].value) {\r\n                      //console.log( s.id + \"===\" + options[i].value);\r\n                      values.push({\"id\": s.id});\r\n                  }\r\n              });\r\n            }\r\n          //console.log(i + \" \" + options[i].value);\r\n        }\r\n      }\r\n      item.subnets = values;\r\n      this.setState({item});\r\n    }\r\n    \r\n    if(name === 'accountId')\r\n    {\r\n       fetch(API_BASE_URL + '/accounts/' + (item.accountId) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n      item.vpcId = '';\r\n      \r\n      item.subnetId = '';\r\n      item.subnets = [];\r\n      item.subnetss = [];\r\n    }\r\n\r\n    if(name === 'vpcId')\r\n    {\r\n        fetch(API_BASE_URL + '/vpcs/' + (item.vpcId) + '/subnets',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          item.subnetss = jsonResult;\r\n          this.setState({item: item});\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n          name: true,\r\n          accountId: true,\r\n          vpcId: true,\r\n          subnetId: true,\r\n          typeId: true\r\n    };\r\n    const errors = this.validate(item.name, item.vpcId, item.subnetId, item.typeId, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) {\r\n        this.forceUpdate();\r\n        return;\r\n    }\r\n    \r\n    const hist= API_BASE_URL + '/subnetGroups'; \r\n\r\n    item.vpc={id: item.vpcId};\r\n    item.account={id: item.accountId};\r\n    item.type=item.typeId;\r\n\r\n    var values = [];\r\n    item.rdss=[];\r\n    if(item.rdss && item.rdss.length){\r\n      item.rdss.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.rdss= values;\r\n    }\r\n    values = [];\r\n    if(item.efss && item.efss.length){\r\n      item.efss.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.efss= values;\r\n    }\r\n    values = [];\r\n    if(item.elasticcaches && item.elasticcaches.length){\r\n      item.elasticcaches.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.elasticcaches= values;\r\n    }\r\n    values = [];\r\n    if(item.elasticsearchs && item.elasticsearchs.length){\r\n      item.elasticsearchs.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.elasticsearchs= values;\r\n    }\r\n    //item.subnets=[{\"id\": 1000}, {\"id\": 1001}];\r\n    //item.subnets={};\r\n    //\r\n    if(item.subnets && item.subnets.length) item.subnets.map(s => {  \r\n          console.log(\"subnet:\" + s.id);\r\n    });\r\n    \r\n    //return;\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/vpcs/' + item.vpc.id + '/subnetGroups/' + item.id : API_BASE_URL + '/vpcs/' + item.vpc.id + '/subnetGroups', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(name, vpcId, subnetId, typeId, accountId) {\r\n\r\n    const errors = {\r\n      name: '' ,\r\n      accountId: '',\r\n      vpcId: '',\r\n      subnetId: '',\r\n      typeId: ''\r\n    };\r\n    \r\n    if(this.state.item.touched.name && name.length === 0){\r\n      errors.name = 'Name should not be null';\r\n      return errors;\r\n    }\r\n     else if(this.state.item.touched.accountId && accountId.length === 0){\r\n      errors.accountId = 'accountId should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.typeId && typeId.length === 0){\r\n      errors.typeId = 'Type should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.vpcId && vpcId.length === 0){\r\n      errors.vpcId = 'Vpc should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.subnetId && subnetId && this.state.item.subnets.length === 0){\r\n      errors.subnetId = 'Add subnets to cover at least 2 availability zones.';\r\n      return errors;\r\n    }\r\n    \r\n\r\n    return errors;\r\n  }\r\n\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit subnetGroup' : 'Add subnetGroup'}</h2>;\r\n\r\n    const errors = this.validate(item.name, item.vpcId, item.subnetId, item.typeId, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = API_BASE_URL + \"/subnetGroups\";\r\n\r\n    let optas = [];\r\n    if(item.accounts && item.accounts.length){\r\n      item.accounts.map(s => {  \r\n          optas.push(<option key={s.id} value={s.id}>{s.id} {s.numAccount}</option>);\r\n      });\r\n    }\r\n    let account = item.accountId || '';\r\n    item.accountId = account;\r\n\r\n    let opts = [];\r\n    if(item.vpcs && item.vpcs.length){\r\n      item.vpcs.map(s => {  \r\n          opts.push(<option key={s.id} value={s.id}>{s.id} {s.name}</option>);\r\n      });\r\n    }\r\n    let vpc = item.vpcId || '';\r\n    item.vpcId = vpc;\r\n\r\n    let optss = [];\r\n    if(item.subnetss && item.subnetss.length){\r\n      item.subnetss.map(s => {\r\n      \r\n          let isSelected = false;\r\n          if(item.subnets && item.subnets.length) item.subnets.map(ss => {\r\n             if(s.id == ss.id) isSelected = true;\r\n          });\r\n          optss.push(<option key={s.id} value={s.id} selected={isSelected}>{s.id} {s.name} {s.az.name}</option>);\r\n      });\r\n    }\r\n    let sub = item.subnetId || {};\r\n    item.subnetId = sub;\r\n\r\n    let tt = item.typeId || '';\r\n    item.typeId = tt;\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"name\">Name (*)</Label>\r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''} placeholder=\"Enter name\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('name')} autoComplete=\"name\"\r\n                   valid={errors.name === ''}\r\n                   invalid={errors.name !== ''}\r\n            />\r\n           <FormFeedback>{errors.name}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"accountId\">Account (*)</Label>\r\n            <Input type=\"select\" name=\"accountId\" id=\"accountId\"  value={account} onChange={this.handleChange} onBlur={this.handleBlur('accountId')}\r\n                 valid={errors.accountId === ''}\r\n                 invalid={errors.accountId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {optas}\r\n            </Input>\r\n            <FormFeedback>{errors.accountId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"typeId\">Type (*)</Label>\r\n            <Input type=\"select\" name=\"typeId\" id=\"typeId\" value={tt} onChange={this.handleChange} onBlur={this.handleBlur('typeId')}\r\n                 valid={errors.typeId === ''}\r\n                 invalid={errors.typeId !== ''}\r\n                 \r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              <option value=\"RDS\">RDS</option>\r\n              <option value=\"EFS\">EFS</option>\r\n              <option value=\"ECC\">Elastic cache</option>\r\n              <option value=\"ELK\">Elastic search</option>\r\n            </Input>\r\n            <FormFeedback>{errors.typeId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"vpcId\">Vpcs (*)</Label>\r\n            <Input type=\"select\" name=\"vpcId\" id=\"vpcId\"  value={vpc} onChange={this.handleChange} onBlur={this.handleBlur('vpcId')}\r\n                 valid={errors.vpcId === ''}\r\n                 invalid={errors.vpcId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {opts}\r\n            </Input>\r\n            <FormFeedback>{errors.vpcId}</FormFeedback>\r\n          </FormGroup>\r\n         \r\n          <FormGroup>\r\n            <Label for=\"subnetId\">Subnets (*)</Label>\r\n            <Input type=\"select\" name=\"subnetId\" id=\"subnetId\"  /*value={\"1001\",\"1002\"}*/ onChange={this.handleChange} onBlur={this.handleBlur('subnetId')} multiple\r\n                 valid={errors.subnetId === ''}\r\n                 invalid={errors.subnetId !== ''}\r\n            >\r\n            <option value=\"\" disabled>Choose</option>\r\n              {optss}\r\n            </Input>\r\n            <FormFeedback>{errors.subnetId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n\t\t      <FormGroup>\r\n            <Label for=\"text\">Description</Label>\r\n            <Input type=\"text\" name=\"text\" id=\"text\" value={item.text || ''}\r\n                   onChange={this.handleChange} autoComplete=\"text\"/>\r\n          </FormGroup>\r\n\r\n\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n\r\n            \r\n\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(SubnetGroupEdit);"]},"metadata":{},"sourceType":"module"}