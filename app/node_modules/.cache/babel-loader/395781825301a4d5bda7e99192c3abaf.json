{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\EfsEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback, FormText } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { API_BASE_URL, FRT_BASE_URL } from './constants';\n\nvar EfsEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EfsEdit, _Component);\n\n  function EfsEdit(props) {\n    var _this;\n\n    _classCallCheck(this, EfsEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EfsEdit).call(this, props));\n    _this.emptyItem = {\n      name: '',\n      account: {},\n      accounts: {},\n      accountId: '',\n      text: '',\n      vpc: {},\n      vpcs: {},\n      vpcId: '',\n      subnetgroup: {},\n      subnetgroups: {},\n      subnetgroupId: '',\n      performanceMode: 'Default',\n      throughputMode: 'Bursting',\n      provisionedIo: 0,\n      encryption: false,\n      encryptionType: 'Kms',\n      kmsId: '',\n      kms: {},\n      kmss: [],\n      kmsExterne: '',\n      touched: {\n        name: false,\n        accountId: false,\n        vpcId: false,\n        subnetgroupId: false,\n        performanceMode: false,\n        throughputMode: false,\n        provisionedIo: false,\n        kmsId: false,\n        kmsExterne: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EfsEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var efs, item, _efs;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/efss/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                efs = _context.sent;\n                efs.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  subnetgroupId: false,\n                  performanceMode: false,\n                  throughputMode: false,\n                  provisionedIo: false,\n                  kmsId: false,\n                  kmsExterne: false\n                };\n                this.setState({\n                  item: efs\n                });\n                _context.next = 10;\n                return fetch(API_BASE_URL + '/accounts/' + efs.account.id + '/vpcs').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.vpcs = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 10:\n                _context.next = 12;\n                return fetch(API_BASE_URL + '/vpcs/' + efs.vpc.id + '/type/EFS' + '/subnetGroups').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.subnetgroups = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 12:\n                item = _objectSpread({}, this.state.item);\n                item.vpcId = efs.vpc.id;\n                item.accountId = efs.account.id;\n                item.subnetgroupId = efs.subnetgroup.id;\n                if (efs.kms) item.kmsId = efs.kms.id;\n                fetch(API_BASE_URL + '/accounts/' + efs.vpc.account.id + '/kmss').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.kmss = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n                this.setState({\n                  item: item\n                });\n                _context.next = 24;\n                break;\n\n              case 21:\n                _efs = {\n                  name: '',\n                  account: {},\n                  accounts: {},\n                  accountId: '',\n                  text: '',\n                  vpc: {},\n                  vpcs: {},\n                  vpcId: '',\n                  subnetgroup: {},\n                  subnetgroups: {},\n                  subnetgroupId: '',\n                  performanceMode: 'Default',\n                  throughputMode: 'Bursting',\n                  provisionedIo: 0,\n                  encryption: false,\n                  encryptionType: 'Kms',\n                  kmsId: '',\n                  kms: {},\n                  kmss: [],\n                  kmsExterne: '',\n                  touched: {\n                    name: false,\n                    accountId: false,\n                    vpcId: false,\n                    subnetgroupId: false,\n                    performanceMode: false,\n                    throughputMode: false,\n                    provisionedIo: false,\n                    kmsId: false,\n                    kmsExterne: false\n                  }\n                };\n                _efs.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  subnetgroupId: false,\n                  performanceMode: false,\n                  throughputMode: false,\n                  provisionedIo: false,\n                  kmsId: false,\n                  kmsExterne: false\n                };\n                this.setState({\n                  item: _efs\n                });\n\n              case 24:\n                _context.next = 26;\n                return fetch(API_BASE_URL + '/accounts').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.accounts = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this3 = this;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      });\n\n      if (name === 'encryption') {\n        item.encryption = target.checked ? true : false;\n      }\n\n      if (name === 'performanceMode') {\n        if (value === 'Default') {\n          item.performanceMode = 'Default';\n        } else {\n          item.performanceMode = 'MaxIo';\n        }\n      }\n\n      if (name === 'throughputMode') {\n        if (value === 'Bursting') {\n          item.throughputMode = 'Bursting';\n        } else {\n          item.throughputMode = 'Provisioned';\n        }\n      }\n\n      if (name === 'encryptionType') {\n        if (value === 'Kms') {\n          item.encryptionType = 'Kms';\n        } else {\n          item.encryptionType = 'KmsExterne';\n        }\n      }\n\n      if (name === 'accountId') {\n        fetch(API_BASE_URL + '/accounts/' + item.accountId + '/vpcs').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          var item = _objectSpread({}, _this3.state.item);\n\n          item.vpcs = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n        item.vpcId = '';\n        item.kmsId = '';\n        item.kms = {};\n        item.kmsss = [];\n        item.subnetgroupId = '';\n        item.subnetgroup = {};\n        item.subnetgroups = [];\n      }\n\n      if (name === 'vpcId') {\n        fetch(API_BASE_URL + '/vpcs/' + item.vpcId + '/type/EFS' + '/subnetGroups').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          item.subnetgroups = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n        fetch(API_BASE_URL + '/accounts/' + item.accountId + '/kmss').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          //let item = {...this.state.item};\n          item.kmss = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  name: true,\n                  accountId: true,\n                  vpcId: true,\n                  subnetgroupId: true,\n                  performanceMode: true,\n                  throughputMode: true,\n                  provisionedIo: true,\n                  kmsId: true,\n                  kmsExterne: true\n                };\n                errors = this.validate(item.name, item.vpcId, item.subnetgroupId, item.performanceMode, item.throughputMode, item.provisionedIo, item.kmsId, item.kmsExterne, item.accountId);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = FRT_BASE_URL + '/efss';\n                item.vpc = {\n                  id: item.vpcId\n                };\n                item.account = {\n                  id: item.accountId\n                };\n                item.subnetgroup = {\n                  id: item.subnetgroupId\n                }; //console.log(\"sma\" + item.subnetgroupId);\n\n                if (item.throughputMode === 'Bursting') item.provisionedIo = 0;\n\n                if (item.encryption) {\n                  if (item.encryptionType === 'KmsExterne') {\n                    item.kms = null;\n                  } else {\n                    item.kmsExterne = '';\n                    item.kms = {\n                      id: item.kmsId\n                    };\n                  }\n                } else {\n                  item.kms = null;\n                  item.kmsExterne = '';\n                }\n\n                _context2.next = 16;\n                return fetch(item.id ? API_BASE_URL + '/vpcs/' + item.vpc.id + '/efss/' + item.id : API_BASE_URL + '/vpcs/' + item.vpc.id + '/efss', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 16:\n                this.props.history.push(hist);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(name, vpcId, subnetgroupId, performanceMode, throughputMode, provisionedIo, kmsId, kmsExterne, accountId) {\n      var errors = {\n        name: '',\n        accountId: '',\n        vpcId: '',\n        subnetgroupId: '',\n        performanceMode: '',\n        throughputMode: '',\n        provisionedIo: '',\n        kmsId: '',\n        kmsExterne: ''\n      };\n\n      if (this.state.item.touched.name && name.length === 0) {\n        errors.name = 'Name should not be null';\n        return errors;\n      } else if (this.state.item.touched.accountId && accountId.length === 0) {\n        errors.accountId = 'accountId should not be null';\n        return errors;\n      } else if (this.state.item.touched.vpcId && vpcId.length === 0) {\n        errors.vpcId = 'Vpc should not be null';\n        return errors;\n      } else if (this.state.item.touched.subnetgroupId && subnetgroupId.length === 0) {\n        errors.subnetgroupId = 'Subnet group should not be null';\n        return errors;\n      } else if (this.state.item.touched.performanceMode && performanceMode.length === 0) {\n        errors.performanceMode = 'performanceMode should not be null';\n        return errors;\n      } else if (this.state.item.touched.throughputMode && throughputMode.length === 0) {\n        errors.throughputMode = 'throughputMode should not be null';\n        return errors;\n      } else if (this.state.item.throughputMode === 'Provisioned' && this.state.item.touched.provisionedIo && (provisionedIo <= 0 || provisionedIo > 1024)) {\n        errors.provisionedIo = 'Valid range is 1-1024 MiB/s';\n        return errors;\n      } else if (this.state.item.encryption && this.state.item.encryptionType === 'Kms' && this.state.item.touched.kmsId && kmsId.length === 0) {\n        errors.kmsId = 'kmsId should not be null';\n        return errors;\n      } else if (this.state.item.encryption && this.state.item.encryptionType === 'KmsExterne' && this.state.item.touched.kmsExterne && kmsExterne.length === 0) {\n        errors.kmsExterne = 'kmsExterne should not be null';\n        return errors;\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, item.id ? 'Edit efs' : 'Add efs');\n      var errors = this.validate(item.name, item.vpcId, item.subnetgroupId, item.performanceMode, item.throughputMode, item.provisionedIo, item.kmsId, item.kmsExterne, item.accountId);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = FRT_BASE_URL + \"/efss\";\n      var optas = [];\n\n      if (item.accounts && item.accounts.length) {\n        item.accounts.map(function (s) {\n          optas.push(React.createElement(\"option\", {\n            key: s.id,\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 397\n            },\n            __self: this\n          }, s.id, \" \", s.numAccount));\n        });\n      }\n\n      var account = item.accountId || '';\n      item.accountId = account;\n      var opts = [];\n\n      if (item.vpcs && item.vpcs.length) {\n        item.vpcs.map(function (s) {\n          opts.push(React.createElement(\"option\", {\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 406\n            },\n            __self: this\n          }, s.id, \" \", s.name));\n        });\n      }\n\n      var tri = item.vpcId || '';\n      item.vpcId = tri;\n      var optss = [];\n\n      if (item.subnetgroups && item.subnetgroups.length) {\n        item.subnetgroups.map(function (s) {\n          optss.push(React.createElement(\"option\", {\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 416\n            },\n            __self: this\n          }, s.id, \" \", s.name));\n        });\n      }\n\n      var sg = item.subnetgroupId || '';\n      item.subnetgroupId = sg;\n      var provisionedIo = item.throughputMode === 'Provisioned' ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"provisionedIo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, \"Provisioned Io (*)\"), React.createElement(Input, {\n        type: \"number\",\n        name: \"provisionedIo\",\n        id: \"provisionedIo\",\n        value: item.provisionedIo || '',\n        placeholder: \"Enter provisionedIo\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('provisionedIo'),\n        autoComplete: \"provisionedIo\",\n        valid: errors.provisionedIo === '',\n        invalid: errors.provisionedIo !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, errors.provisionedIo), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, \"Valid range is 1-1024 MiB/s\")) : '';\n      var encryptionType = item.encryption ? React.createElement(FormGroup, {\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"performanceMode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"encryptionType\",\n        id: \"encryptionType\",\n        value: \"Kms\",\n        checked: item.encryptionType === 'Kms',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('encryptionType'),\n        autoComplete: \"encryptionType\",\n        valid: errors.encryptionType === '',\n        invalid: errors.encryptionType !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }), ' ', \"Select KMS master key\")), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"encryptionType\",\n        id: \"encryptionType\",\n        value: \"KmsExterne\",\n        checked: item.encryptionType === 'KmsExterne',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('encryptionType'),\n        autoComplete: \"encryptionType\",\n        valid: errors.encryptionType === '',\n        invalid: errors.encryptionType !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }), ' ', \"Enter a KMS key ARN from another account\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }, errors.encryptionType)) : '';\n      var kmsExterne = item.encryption && item.encryptionType === 'KmsExterne' ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }, \"ARN/ID (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"kmsExterne\",\n        id: \"kmsExterne\",\n        value: item.kmsExterne || '',\n        placeholder: \"Enter kmsExterne\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('kmsExterne'),\n        autoComplete: \"kmsExterne\",\n        valid: errors.kmsExterne === '',\n        invalid: errors.kmsExterne !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      }, errors.kmsExterne)) : '';\n      var optks = [];\n\n      if (item.kmss && item.kmss.length) {\n        item.kmss.map(function (r) {\n          optks.push(React.createElement(\"option\", {\n            value: r.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 471\n            },\n            __self: this\n          }, r.id, \" \", r.alias));\n        });\n      }\n\n      var kms = item.kmsId || '';\n      item.kmsId = kms;\n      var kmss = item.encryption && item.encryptionType === 'Kms' ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"kmsId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, \"Kms (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"kmsId\",\n        id: \"kmsId\",\n        value: kms,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('kmsId'),\n        valid: errors.kmsId === '',\n        invalid: errors.kmsId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, \"Choose\"), optks), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, errors.kmsId)) : '';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, \"Name (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: item.name || '',\n        placeholder: \"Enter name\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('name'),\n        autoComplete: \"name\",\n        valid: errors.name === '',\n        invalid: errors.name !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, errors.name)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"accountId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, \"Account (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"accountId\",\n        id: \"accountId\",\n        value: account,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('accountId'),\n        valid: errors.accountId === '',\n        invalid: errors.accountId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, \"Choose\"), optas), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, errors.accountId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"vpcId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, \"Vpcs (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"vpcId\",\n        id: \"vpcId\",\n        value: tri,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('vpcId'),\n        valid: errors.vpcId === '',\n        invalid: errors.vpcId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, \"Choose\"), opts), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, errors.vpcId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"subnetgroupId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529\n        },\n        __self: this\n      }, \"Subnet group (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"subnetgroupId\",\n        id: \"subnetgroupId\",\n        value: sg,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('subnetgroupId'),\n        valid: errors.subnetgroupId === '',\n        invalid: errors.subnetgroupId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, \"Choose\"), optss), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, errors.subnetgroupId)), React.createElement(FormGroup, {\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"performanceMode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, \"Performance Mode(*)  \"), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"performanceMode\",\n        id: \"performanceMode\",\n        value: \"Default\",\n        checked: item.performanceMode === 'Default',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('performanceMode'),\n        autoComplete: \"performanceMode\",\n        valid: errors.performanceMode === '',\n        invalid: errors.performanceMode !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }), ' ', \"General Purpose\")), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"performanceMode\",\n        id: \"performanceMode\",\n        value: \"MaxIo\",\n        checked: item.performanceMode === 'MaxIo',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('performanceMode'),\n        autoComplete: \"performanceMode\",\n        valid: errors.performanceMode === '',\n        invalid: errors.performanceMode !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }), ' ', \"Max I/O\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562\n        },\n        __self: this\n      }, errors.performanceMode)), React.createElement(FormGroup, {\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"throughputMode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, \"Throughput Mode(*)  \"), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"throughputMode\",\n        id: \"throughputMode\",\n        value: \"Bursting\",\n        checked: item.throughputMode === 'Bursting',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('throughputMode'),\n        autoComplete: \"throughputMode\",\n        valid: errors.throughputMode === '',\n        invalid: errors.throughputMode !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }), ' ', \"Bursting\")), React.createElement(FormGroup, {\n        check: true,\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"throughputMode\",\n        id: \"throughputMode\",\n        value: \"Provisioned\",\n        checked: item.throughputMode === 'Provisioned',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('throughputMode'),\n        autoComplete: \"throughputMode\",\n        valid: errors.throughputMode === '',\n        invalid: errors.throughputMode !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }), ' ', \"Provisioned\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589\n        },\n        __self: this\n      }, errors.throughputMode)), provisionedIo, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"encryption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594\n        },\n        __self: this\n      }, \"Enable encryption of data at rest:\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Input, {\n        type: \"checkbox\",\n        name: \"encryption\",\n        id: \"encryption\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('encryption'),\n        checked: item.encryption === true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      })), encryptionType, kmss, kmsExterne, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"text\",\n        id: \"text\",\n        value: item.text || '',\n        onChange: this.handleChange,\n        autoComplete: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return EfsEdit;\n}(Component);\n\nexport default withRouter(EfsEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\EfsEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","FormText","AppNavbar","API_BASE_URL","FRT_BASE_URL","EfsEdit","props","emptyItem","name","account","accounts","accountId","text","vpc","vpcs","vpcId","subnetgroup","subnetgroups","subnetgroupId","performanceMode","throughputMode","provisionedIo","encryption","encryptionType","kmsId","kms","kmss","kmsExterne","touched","handleBlur","field","evt","item","state","setState","handleChange","bind","handleSubmit","match","params","id","fetch","json","efs","then","result","jsonResult","event","target","value","checked","kmsss","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","method","headers","body","JSON","stringify","history","push","length","title","canc","optas","map","s","numAccount","opts","tri","optss","sg","optks","r","alias"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback, FormText } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { API_BASE_URL, FRT_BASE_URL } from './constants';\r\n\r\nclass EfsEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n    account: {},\r\n    accounts: {},\r\n    accountId : '',\r\n    text: '',\r\n    vpc: {},\r\n    vpcs: {},\r\n    vpcId : '',\r\n    subnetgroup: {},\r\n    subnetgroups: {},\r\n    subnetgroupId : '',\r\n    performanceMode: 'Default', \r\n    throughputMode: 'Bursting', \r\n    provisionedIo: 0, \r\n    encryption: false,\r\n    encryptionType: 'Kms', \r\n    kmsId:'',\r\n    kms: {},\r\n    kmss: [],\r\n    kmsExterne: '',\r\n    touched: {\r\n      name: false,\r\n      accountId: false,\r\n      vpcId: false,\r\n      subnetgroupId: false,\r\n      performanceMode: false, \r\n      throughputMode: false, \r\n      provisionedIo: false, \r\n      kmsId: false,\r\n      kmsExterne: false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const efs = await (await fetch(`${API_BASE_URL}/efss/${this.props.match.params.id}`)).json();\r\n      efs.touched = {\r\n        name: false,\r\n        accountId: false,\r\n        vpcId: false,\r\n        subnetgroupId: false,\r\n        performanceMode: false, \r\n        throughputMode: false, \r\n        provisionedIo: false, \r\n        kmsId: false,\r\n        kmsExterne: false\r\n      };\r\n      this.setState({item: efs});\r\n      \r\n      await fetch(API_BASE_URL + '/accounts/' + (efs.account.id) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n\r\n      await fetch(API_BASE_URL + '/vpcs/' + (efs.vpc.id) + '/type/EFS' +'/subnetGroups',)\r\n        .then((result) => {\r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          let item = {...this.state.item};\r\n          item.subnetgroups = jsonResult;\r\n          this.setState({item: item});\r\n      });\r\n\r\n      let item = {...this.state.item};\r\n      item.vpcId = efs.vpc.id;\r\n      item.accountId = efs.account.id;\r\n      item.subnetgroupId = efs.subnetgroup.id;\r\n      if(efs.kms) item.kmsId = efs.kms.id;\r\n\r\n      fetch(API_BASE_URL + '/accounts/' + (efs.vpc.account.id) + '/kmss',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          let item = {...this.state.item};\r\n          item.kmss = jsonResult;\r\n          this.setState({item: item});\r\n      });\r\n      this.setState({item: item});\r\n      \r\n    }\r\n    else {\r\n      const efs = {\r\n        name: '',\r\n        account: {},\r\n        accounts: {},\r\n        accountId : '',\r\n        text: '',\r\n        vpc: {},\r\n        vpcs: {},\r\n        vpcId : '',\r\n        subnetgroup: {},\r\n        subnetgroups: {},\r\n        subnetgroupId : '',\r\n        performanceMode: 'Default', \r\n        throughputMode: 'Bursting', \r\n        provisionedIo: 0, \r\n        encryption: false, \r\n        encryptionType: 'Kms',\r\n        kmsId:'',\r\n        kms: {},\r\n        kmss: [],\r\n        kmsExterne: '',\r\n        touched: {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          subnetgroupId: false,\r\n          performanceMode: false, \r\n          throughputMode: false, \r\n          provisionedIo: false, \r\n          kmsId: false,\r\n          kmsExterne: false\r\n        }\r\n      };\r\n      efs.touched = {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          subnetgroupId: false,\r\n          performanceMode: false, \r\n          throughputMode: false, \r\n          provisionedIo: false, \r\n          kmsId: false,\r\n          kmsExterne: false\r\n      };\r\n      this.setState({item: efs});\r\n    }\r\n\r\n    await fetch(API_BASE_URL + '/accounts',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.accounts = jsonResult;\r\n      this.setState({item: item});\r\n    });\r\n\r\n    /*await fetch('/vpcs',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.vpcs = jsonResult;\r\n      this.setState({item: item});\r\n    })*/\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n\r\n    if(name === 'encryption')\r\n    {\r\n      item.encryption = (target.checked) ? true: false;\r\n    }\r\n\r\n    if(name === 'performanceMode')\r\n    {\r\n      if(value === 'Default'){\r\n        item.performanceMode = 'Default';\r\n      }\r\n      else\r\n      {\r\n        item.performanceMode = 'MaxIo';\r\n      }\r\n    }\r\n    if(name === 'throughputMode')\r\n    {\r\n      if(value === 'Bursting'){\r\n        item.throughputMode = 'Bursting';\r\n      }\r\n      else\r\n      {\r\n        item.throughputMode = 'Provisioned';\r\n      }\r\n    }\r\n    if(name === 'encryptionType')\r\n    {\r\n      if(value === 'Kms'){\r\n        item.encryptionType = 'Kms';\r\n      }\r\n      else\r\n      {\r\n        item.encryptionType = 'KmsExterne';\r\n      }\r\n    }\r\n    \r\n    if(name === 'accountId')\r\n    {\r\n       fetch(API_BASE_URL + '/accounts/' + (item.accountId) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n      item.vpcId = '';\r\n      \r\n      item.kmsId = '';\r\n      item.kms = {};\r\n      item.kmsss = [];\r\n\r\n      item.subnetgroupId = '';\r\n      item.subnetgroup = {};\r\n      item.subnetgroups = [];\r\n    \r\n    }\r\n\r\n    if(name === 'vpcId')\r\n    {\r\n      \r\n        fetch(API_BASE_URL + '/vpcs/' + (item.vpcId) + '/type/EFS' +'/subnetGroups',)\r\n        .then((result) => {\r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          item.subnetgroups = jsonResult;\r\n          this.setState({item: item});\r\n        });\r\n        fetch(API_BASE_URL + '/accounts/' + (item.accountId) + '/kmss',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          //let item = {...this.state.item};\r\n          item.kmss = jsonResult;\r\n          this.setState({item: item});\r\n        });\r\n      \r\n    }\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n      name: true,\r\n      accountId: true,\r\n      vpcId: true,\r\n      subnetgroupId: true,\r\n      performanceMode: true, \r\n      throughputMode: true, \r\n      provisionedIo: true, \r\n      kmsId: true,\r\n      kmsExterne: true\r\n    };\r\n    const errors = this.validate(item.name, item.vpcId, item.subnetgroupId, item.performanceMode, item.throughputMode, item.provisionedIo, item.kmsId, item.kmsExterne, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) {\r\n        this.forceUpdate();\r\n        return;\r\n    }\r\n    \r\n    const hist= FRT_BASE_URL + '/efss'; \r\n\r\n    item.vpc={id: item.vpcId};\r\n    item.account={id: item.accountId};\r\n    item.subnetgroup={id: item.subnetgroupId};\r\n    \r\n    //console.log(\"sma\" + item.subnetgroupId);\r\n    if(item.throughputMode === 'Bursting') item.provisionedIo = 0;\r\n    \r\n    if(item.encryption)\r\n    {\r\n      if(item.encryptionType === 'KmsExterne')\r\n      {\r\n        item.kms = null;\r\n      }\r\n      else\r\n      {\r\n        item.kmsExterne = '';\r\n        item.kms = {id: item.kmsId};\r\n      }\r\n    }\r\n    else\r\n    {\r\n      item.kms = null;\r\n      item.kmsExterne = '';\r\n    }\r\n\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/vpcs/' + (item.vpc.id) + '/efss/'+(item.id) : API_BASE_URL + '/vpcs/' + item.vpc.id + '/efss', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(name, vpcId, subnetgroupId, performanceMode, throughputMode, provisionedIo, kmsId, kmsExterne, accountId) {\r\n\r\n    const errors = {\r\n      name: '' ,\r\n      accountId: '',\r\n      vpcId: '',\r\n      subnetgroupId: '',\r\n      performanceMode: '', \r\n      throughputMode: '', \r\n      provisionedIo: '', \r\n      kmsId: '',\r\n      kmsExterne: ''\r\n    };\r\n    \r\n    if(this.state.item.touched.name && name.length === 0){\r\n      errors.name = 'Name should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.accountId && accountId.length === 0){\r\n      errors.accountId = 'accountId should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.vpcId && vpcId.length === 0){\r\n      errors.vpcId = 'Vpc should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.subnetgroupId && subnetgroupId.length === 0){\r\n      errors.subnetgroupId = 'Subnet group should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.performanceMode && performanceMode.length === 0){\r\n      errors.performanceMode = 'performanceMode should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.throughputMode && throughputMode.length === 0){\r\n      errors.throughputMode = 'throughputMode should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.throughputMode === 'Provisioned' && this.state.item.touched.provisionedIo && (provisionedIo <= 0 || provisionedIo > 1024)){\r\n      errors.provisionedIo = 'Valid range is 1-1024 MiB/s';\r\n      return errors;\r\n    }\r\n    \r\n    else if(this.state.item.encryption && this.state.item.encryptionType === 'Kms' && this.state.item.touched.kmsId && kmsId.length === 0){\r\n      errors.kmsId = 'kmsId should not be null';\r\n      return errors;\r\n    }\r\n    \r\n    else if(this.state.item.encryption && this.state.item.encryptionType === 'KmsExterne' && this.state.item.touched.kmsExterne && kmsExterne.length === 0){\r\n      errors.kmsExterne = 'kmsExterne should not be null';\r\n      return errors;\r\n    }\r\n    return errors;\r\n  }\r\n\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit efs' : 'Add efs'}</h2>;\r\n\r\n    const errors = this.validate(item.name, item.vpcId, item.subnetgroupId, item.performanceMode, item.throughputMode, item.provisionedIo, item.kmsId, item.kmsExterne, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = FRT_BASE_URL + \"/efss\";\r\n\r\n    let optas = [];\r\n    if(item.accounts && item.accounts.length){\r\n      item.accounts.map(s => {  \r\n          optas.push(<option key={s.id} value={s.id}>{s.id} {s.numAccount}</option>);\r\n      });\r\n    }\r\n    let account = item.accountId || '';\r\n    item.accountId = account;\r\n\r\n    let opts = [];\r\n    if(item.vpcs && item.vpcs.length){\r\n      item.vpcs.map(s => {  \r\n          opts.push(<option value={s.id}>{s.id} {s.name}</option>);\r\n      });\r\n    }\r\n    let tri = item.vpcId || '';\r\n    item.vpcId = tri;\r\n\r\n\r\n    let optss = [];\r\n    if(item.subnetgroups && item.subnetgroups.length){\r\n      item.subnetgroups.map(s => {  \r\n          optss.push(<option value={s.id}>{s.id} {s.name}</option>);\r\n      });\r\n    }\r\n    let sg = item.subnetgroupId || '';\r\n    item.subnetgroupId = sg;\r\n\r\n    let provisionedIo = (item.throughputMode === 'Provisioned') ? <FormGroup>\r\n            <Label for=\"provisionedIo\">Provisioned Io (*)</Label>\r\n            <Input type=\"number\" name=\"provisionedIo\" id=\"provisionedIo\" value={item.provisionedIo || ''} placeholder=\"Enter provisionedIo\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('provisionedIo')} autoComplete=\"provisionedIo\"\r\n                   valid={errors.provisionedIo === ''}\r\n                   invalid={errors.provisionedIo !== ''}\r\n            />\r\n           <FormFeedback>{errors.provisionedIo}</FormFeedback>\r\n           <FormText>Valid range is 1-1024 MiB/s</FormText>\r\n          </FormGroup> : '';\r\n\r\n    let encryptionType = (item.encryption) ? <FormGroup tag=\"fieldset\">\r\n            <Label for=\"performanceMode\"></Label>\r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"encryptionType\" id=\"encryptionType\" value=\"Kms\" checked={item.encryptionType === 'Kms'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('encryptionType')} autoComplete=\"encryptionType\"\r\n                       valid={errors.encryptionType === ''}\r\n                       invalid={errors.encryptionType !== ''}\r\n                />{' '}\r\n                Select KMS master key\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"encryptionType\" id=\"encryptionType\" value=\"KmsExterne\" checked={item.encryptionType === 'KmsExterne'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('encryptionType')} autoComplete=\"encryptionType\"\r\n                       valid={errors.encryptionType === ''}\r\n                       invalid={errors.encryptionType !== ''}\r\n                />{' '}\r\n                 Enter a KMS key ARN from another account\r\n              </Label>\r\n            </FormGroup>\r\n            <FormFeedback>{errors.encryptionType}</FormFeedback>\r\n          </FormGroup> : '' ;\r\n\r\n    let kmsExterne = (item.encryption && item.encryptionType === 'KmsExterne') ? <FormGroup>\r\n            <Label for=\"name\">ARN/ID (*)</Label>\r\n            <Input type=\"text\" name=\"kmsExterne\" id=\"kmsExterne\" value={item.kmsExterne || ''} placeholder=\"Enter kmsExterne\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('kmsExterne')} autoComplete=\"kmsExterne\"\r\n                   valid={errors.kmsExterne === ''}\r\n                   invalid={errors.kmsExterne !== ''}\r\n            />\r\n           <FormFeedback>{errors.kmsExterne}</FormFeedback>\r\n          </FormGroup> : '' ;\r\n\r\n    let optks = [];\r\n    if(item.kmss && item.kmss.length){\r\n      item.kmss.map(r => {  \r\n          optks.push(<option value={r.id}>{r.id} {r.alias}</option>);\r\n      });\r\n    }\r\n    let kms = item.kmsId || '';\r\n    item.kmsId = kms;\r\n\r\n    let kmss = (item.encryption && item.encryptionType === 'Kms') ? <FormGroup>\r\n            <Label for=\"kmsId\">Kms (*)</Label>\r\n            <Input type=\"select\" name=\"kmsId\" id=\"kmsId\"  value={kms} onChange={this.handleChange} onBlur={this.handleBlur('kmsId')}\r\n                 valid={errors.kmsId === ''}\r\n                 invalid={errors.kmsId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {optks}\r\n            </Input>\r\n            <FormFeedback>{errors.kmsId}</FormFeedback>\r\n          </FormGroup> : '';\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n\r\n          <FormGroup>\r\n            <Label for=\"name\">Name (*)</Label>\r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''} placeholder=\"Enter name\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('name')} autoComplete=\"name\"\r\n                   valid={errors.name === ''}\r\n                   invalid={errors.name !== ''}\r\n            />\r\n           <FormFeedback>{errors.name}</FormFeedback>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"accountId\">Account (*)</Label>\r\n            <Input type=\"select\" name=\"accountId\" id=\"accountId\"  value={account} onChange={this.handleChange} onBlur={this.handleBlur('accountId')}\r\n                 valid={errors.accountId === ''}\r\n                 invalid={errors.accountId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {optas}\r\n            </Input>\r\n            <FormFeedback>{errors.accountId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"vpcId\">Vpcs (*)</Label>\r\n            <Input type=\"select\" name=\"vpcId\" id=\"vpcId\"  value={tri} onChange={this.handleChange} onBlur={this.handleBlur('vpcId')}\r\n                 valid={errors.vpcId === ''}\r\n                 invalid={errors.vpcId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {opts}\r\n            </Input>\r\n            <FormFeedback>{errors.vpcId}</FormFeedback>\r\n          </FormGroup>\r\n         \r\n         <FormGroup>\r\n            <Label for=\"subnetgroupId\">Subnet group (*)</Label>\r\n            <Input type=\"select\" name=\"subnetgroupId\" id=\"subnetgroupId\"  value={sg} onChange={this.handleChange} onBlur={this.handleBlur('subnetgroupId')}\r\n                 valid={errors.subnetgroupId === ''}\r\n                 invalid={errors.subnetgroupId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {optss}\r\n            </Input>\r\n            <FormFeedback>{errors.subnetgroupId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup tag=\"fieldset\">\r\n            <Label for=\"performanceMode\">Performance Mode(*)  </Label>\r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"performanceMode\" id=\"performanceMode\" value=\"Default\" checked={item.performanceMode === 'Default'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('performanceMode')} autoComplete=\"performanceMode\"\r\n                       valid={errors.performanceMode === ''}\r\n                       invalid={errors.performanceMode !== ''}\r\n                />{' '}\r\n                General Purpose\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"performanceMode\" id=\"performanceMode\" value=\"MaxIo\" checked={item.performanceMode === 'MaxIo'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('performanceMode')} autoComplete=\"performanceMode\"\r\n                       valid={errors.performanceMode === ''}\r\n                       invalid={errors.performanceMode !== ''}\r\n                />{' '}\r\n                 Max I/O\r\n              </Label>\r\n            </FormGroup>\r\n            <FormFeedback>{errors.performanceMode}</FormFeedback>\r\n          </FormGroup>\r\n\r\n\r\n\r\n          <FormGroup tag=\"fieldset\">\r\n            <Label for=\"throughputMode\">Throughput Mode(*)  </Label> \r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"throughputMode\" id=\"throughputMode\" value=\"Bursting\" checked={item.throughputMode === 'Bursting'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('throughputMode')} autoComplete=\"throughputMode\"\r\n                       valid={errors.throughputMode === ''}\r\n                       invalid={errors.throughputMode !== ''}\r\n                />{' '}\r\n                Bursting\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check inline>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"throughputMode\" id=\"throughputMode\" value=\"Provisioned\" checked={item.throughputMode === 'Provisioned'}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('throughputMode')} autoComplete=\"throughputMode\"\r\n                       valid={errors.throughputMode === ''}\r\n                       invalid={errors.throughputMode !== ''}\r\n                />{' '}\r\n                 Provisioned\r\n              </Label>\r\n            </FormGroup>\r\n            <FormFeedback>{errors.throughputMode}</FormFeedback>\r\n          </FormGroup>\r\n          {provisionedIo}\r\n\r\n          <FormGroup > \r\n            <Label for=\"encryption\">Enable encryption of data at rest:</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Input type=\"checkbox\" name=\"encryption\" id=\"encryption\" \r\n                    onChange={this.handleChange} onBlur={this.handleBlur('encryption')} \r\n                    checked={item.encryption === true}/>\r\n          </FormGroup>\r\n\r\n          {encryptionType}\r\n          {kmss}\r\n          {kmsExterne}\r\n\r\n          <FormGroup>\r\n            <Label for=\"text\">Description</Label>\r\n            <Input type=\"text\" name=\"text\" id=\"text\" value={item.text || ''}\r\n                   onChange={this.handleChange} autoComplete=\"text\"/>\r\n          </FormGroup>\r\n\r\n\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n\r\n            \r\n\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(EfsEdit);"]},"metadata":{},"sourceType":"module"}