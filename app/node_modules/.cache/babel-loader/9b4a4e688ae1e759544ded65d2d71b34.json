{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\EccNetworkInterfaceEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { API_BASE_URL, FRT_BASE_URL } from './constants'; //const cidrRegex = require('cidr-regex');\n\nvar ipaddr = require('ipaddr.js');\n\nvar EccNetworkInterfaceEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EccNetworkInterfaceEdit, _Component);\n\n  function EccNetworkInterfaceEdit(props) {\n    var _this;\n\n    _classCallCheck(this, EccNetworkInterfaceEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EccNetworkInterfaceEdit).call(this, props));\n    _this.emptyItem = {\n      device: '',\n      networkInterface: '',\n      primaryIp: '',\n      secondaryIp: '',\n      ipv6Ips: '',\n      ecc: {},\n      subnet: {},\n      touched: {\n        device: false,\n        networkInterface: false,\n        primaryIp: false,\n        secondaryIp: false,\n        ipv6Ips: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EccNetworkInterfaceEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var eccNetworkInterface, item, ecc, _eccNetworkInterface, _item;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/eccNetworkInterfaces/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                eccNetworkInterface = _context.sent;\n                eccNetworkInterface.touched = {\n                  device: false,\n                  networkInterface: false,\n                  primaryIp: false,\n                  secondaryIp: false,\n                  ipv6Ips: false\n                };\n                this.setState({\n                  item: eccNetworkInterface\n                });\n                item = _objectSpread({}, this.state.item);\n                item.subnet = eccNetworkInterface.ecc.subnet; //console.log('subnet');\n                //if(eccNetworkInterface.ecc.subnet) console.log('subnet=' + eccNetworkInterface.ecc.subnet.id + ' ' +eccNetworkInterface.ecc.subnet.name);\n\n                this.setState({\n                  item: item\n                });\n                _context.next = 25;\n                break;\n\n              case 13:\n                _context.next = 15;\n                return fetch(\"\".concat(API_BASE_URL, \"/eccs/\").concat(this.props.match.params.ide));\n\n              case 15:\n                _context.next = 17;\n                return _context.sent.json();\n\n              case 17:\n                ecc = _context.sent;\n                _eccNetworkInterface = {\n                  device: '',\n                  networkInterface: '',\n                  primaryIp: '',\n                  secondaryIp: '',\n                  ipv6Ips: '',\n                  ecc: {},\n                  subnet: {},\n                  touched: {\n                    device: false,\n                    networkInterface: false,\n                    primaryIp: false,\n                    secondaryIp: false,\n                    ipv6Ips: false\n                  }\n                };\n                _eccNetworkInterface.ecc = ecc;\n                _eccNetworkInterface.touched = {\n                  device: false,\n                  networkInterface: false,\n                  primaryIp: false,\n                  secondaryIp: false,\n                  ipv6Ips: false\n                };\n                this.setState({\n                  item: _eccNetworkInterface\n                });\n                _item = _objectSpread({}, this.state.item);\n                _item.subnet = ecc.subnet;\n                this.setState({\n                  item: _item\n                });\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  device: true,\n                  networkInterface: true,\n                  primaryIp: true,\n                  secondaryIp: true,\n                  ipv6Ips: true\n                };\n                errors = this.validate(item.device, item.networkInterface, item.primaryIp, item.secondaryIp, item.ipv6Ips, item.subnet);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = FRT_BASE_URL + '/ecc/' + item.ecc.id + '/eccNetworkInterfaces';\n                item.ecc = {\n                  id: item.ecc.id\n                }; //return;\n\n                _context2.next = 12;\n                return fetch(item.id ? API_BASE_URL + '/eccs/' + item.ecc.id + '/eccNetworkInterfaces/' + item.id : API_BASE_URL + '/eccs/' + item.ecc.id + '/eccNetworkInterfaces', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 12:\n                this.props.history.push(hist);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(device, networkInterface, primaryIp, secondaryIp, ipv6Ips, subnet) {\n      var errors = {\n        device: '',\n        networkInterface: '',\n        primaryIp: '',\n        secondaryIp: '',\n        ipv6Ips: ''\n      };\n      var sub = '';\n      var iprange = '';\n      var ip = '';\n\n      if (subnet && subnet.sCidr) {\n        sub = subnet.sCidr.subnetCidr.split(\"/\");\n        iprange = sub[1];\n        ip = sub[0];\n      }\n\n      if (this.state.item.touched.device && device.length === 0) {\n        errors.device = 'device should not be null';\n        return errors;\n      }\n\n      if (this.state.item.touched.networkInterface && networkInterface.length === 0) {\n        errors.networkInterface = 'networkInterface should not be null';\n        return errors;\n      }\n\n      if (this.state.item.touched.primaryIp && primaryIp.length !== 0 && !ipaddr.isValid(primaryIp) && sub) {\n        errors.primaryIp = 'primaryIp should have Ip format';\n        return errors;\n      }\n\n      if (this.state.item.touched.primaryIp && primaryIp.length !== 0 && ipaddr.isValid(primaryIp) && sub) {\n        var addr = ipaddr.parse(primaryIp);\n        var range = ipaddr.parse(ip);\n\n        if (!addr.match(range, iprange)) {\n          errors.primaryIp = 'primaryIp should be in subnet cidr';\n          return errors;\n        }\n      }\n\n      if (this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && !ipaddr.isValid(secondaryIp) && sub) {\n        errors.secondaryIp = 'secondaryIp should have Ip format';\n        return errors;\n      }\n\n      if (this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && ipaddr.isValid(secondaryIp) && sub) {\n        console.log('secondaryIp=' + secondaryIp);\n        var addr = ipaddr.parse(secondaryIp);\n        var range = ipaddr.parse(ip);\n\n        if (!addr.match(range, iprange)) {\n          errors.secondaryIp = 'secondaryIp should be in subnet cidr';\n          return errors;\n        }\n      }\n\n      if (this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && sub && this.state.item.touched.primaryIp && primaryIp.length !== 0 && primaryIp === secondaryIp) {\n        errors.secondaryIp = 'secondaryIp should be in different to secondaryIp';\n        return errors;\n      }\n\n      if (this.state.item.touched.ipv6Ips && ipv6Ips.length !== 0 && ipaddr.isValid(ipv6Ips)) {\n        errors.ipv6Ips = 'ipv6Ips should have Ip format';\n        return errors;\n      } // verfication des ip\n\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, item.id ? 'Edit Ec2 NetworkInterface' : 'Add Ec2 NetworkInterface');\n      var errors = this.validate(item.device, item.networkInterface, item.primaryIp, item.secondaryIp, item.ipv6Ips, item.subnet);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = FRT_BASE_URL + \"/ecc/\" + item.ecc.id + \"/eccNetworkInterfaces\";\n      var ecc = null;\n      ecc = React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"eccId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Ec2: \", item.ecc.id), React.createElement(Input, {\n        type: \"text\",\n        name: \"eccId\",\n        id: \"eccId\",\n        value: item.ecc.id || '',\n        disabled: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }));\n      var subnet = null;\n\n      if (item.subnet && item.subnet.sCidr) {\n        subnet = React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"sub\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, \"Subnet: \", item.subnet.name, \" - \", item.subnet.sCidr.subnetCidr), React.createElement(Input, {\n          type: \"text\",\n          name: \"sub\",\n          id: \"sub\",\n          value: item.subnet.id || '',\n          disabled: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, ecc, subnet, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"device\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Device (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"device\",\n        id: \"device\",\n        value: item.device || '',\n        placeholder: \"Enter device\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('device'),\n        autoComplete: \"device\",\n        valid: errors.device === '',\n        invalid: errors.device !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, errors.device)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"networkInterface\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"Network Interface (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"networkInterface\",\n        id: \"networkInterface\",\n        value: item.networkInterface || '',\n        placeholder: \"Enter networkInterface\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('networkInterface'),\n        valid: errors.networkInterface === '',\n        invalid: errors.networkInterface !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, \"Choose\"), React.createElement(\"option\", {\n        value: \"New\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"New\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, errors.networkInterface)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"primaryIp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Primary Ip (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"primaryIp\",\n        id: \"primaryIp\",\n        value: item.primaryIp || '',\n        placeholder: \"Enter primaryIp\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('primaryIp'),\n        autoComplete: \"primaryIp\",\n        valid: errors.primaryIp === '',\n        invalid: errors.primaryIp !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, errors.primaryIp)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"secondaryIp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, \"Secondary Ip \"), React.createElement(Input, {\n        type: \"text\",\n        name: \"secondaryIp\",\n        id: \"secondaryIp\",\n        value: item.secondaryIp || '',\n        placeholder: \"Enter secondaryIp\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('secondaryIp'),\n        autoComplete: \"secondaryIp\",\n        valid: errors.secondaryIp === '',\n        invalid: errors.secondaryIp !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, errors.secondaryIp)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"ipv6Ips\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"Ipv6 Ip\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"ipv6Ips\",\n        id: \"ipv6Ips\",\n        value: item.ipv6Ips || '',\n        placeholder: \"Enter ipv6Ips\",\n        disabled: \"true\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('ipv6Ips'),\n        autoComplete: \"ipv6Ips\",\n        valid: errors.ipv6Ips === '',\n        invalid: errors.ipv6Ips !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, errors.ipv6Ips)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return EccNetworkInterfaceEdit;\n}(Component);\n\nexport default withRouter(EccNetworkInterfaceEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\EccNetworkInterfaceEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","AppNavbar","API_BASE_URL","FRT_BASE_URL","ipaddr","require","EccNetworkInterfaceEdit","props","emptyItem","device","networkInterface","primaryIp","secondaryIp","ipv6Ips","ecc","subnet","touched","handleBlur","field","evt","item","state","setState","handleChange","bind","handleSubmit","match","params","id","fetch","json","eccNetworkInterface","ide","event","target","value","name","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","method","headers","body","JSON","stringify","history","push","sub","iprange","ip","sCidr","subnetCidr","split","length","isValid","addr","parse","range","console","log","title","canc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { API_BASE_URL, FRT_BASE_URL } from './constants';\r\n//const cidrRegex = require('cidr-regex');\r\nvar ipaddr = require('ipaddr.js');\r\nclass EccNetworkInterfaceEdit extends Component {\r\n\r\n  emptyItem = {\r\n    device: '',\r\n    networkInterface: '',\r\n    primaryIp: '',\r\n    secondaryIp: '',\r\n    ipv6Ips: '', \r\n    ecc: {},\r\n    subnet: {},\r\n    touched: {\r\n      device:false,\r\n      networkInterface: false,\r\n      primaryIp: false,\r\n      secondaryIp:false,\r\n      ipv6Ips:false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const eccNetworkInterface = await (await fetch(`${API_BASE_URL}/eccNetworkInterfaces/${this.props.match.params.id}`)).json();\r\n      eccNetworkInterface.touched = {\r\n        device:false,\r\n        networkInterface: false,\r\n        primaryIp: false,\r\n        secondaryIp:false,\r\n        ipv6Ips:false\r\n      };\r\n      this.setState({item: eccNetworkInterface});\r\n      let item = {...this.state.item};\r\n      item.subnet = eccNetworkInterface.ecc.subnet;\r\n      //console.log('subnet');\r\n      //if(eccNetworkInterface.ecc.subnet) console.log('subnet=' + eccNetworkInterface.ecc.subnet.id + ' ' +eccNetworkInterface.ecc.subnet.name);\r\n      this.setState({item: item});\r\n      \r\n\r\n    }\r\n    else {\r\n      const ecc = await (await fetch(`${API_BASE_URL}/eccs/${this.props.match.params.ide}`)).json();\r\n      const eccNetworkInterface = {\r\n        device: '',\r\n        networkInterface: '',\r\n        primaryIp: '',\r\n        secondaryIp: '',\r\n        ipv6Ips: '', \r\n        ecc: {},\r\n        subnet:{},\r\n        touched: {\r\n          device:false,\r\n          networkInterface: false,\r\n          primaryIp: false,\r\n          secondaryIp:false,\r\n          ipv6Ips:false\r\n        }\r\n      };\r\n      eccNetworkInterface.ecc = ecc;\r\n\r\n      eccNetworkInterface.touched = {\r\n          device:false,\r\n          networkInterface: false,\r\n          primaryIp: false,\r\n          secondaryIp:false,\r\n          ipv6Ips:false\r\n      };\r\n      this.setState({item: eccNetworkInterface});\r\n      let item = {...this.state.item};\r\n      item.subnet = ecc.subnet;\r\n      this.setState({item: item});\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n      device:true,\r\n      networkInterface: true,\r\n      primaryIp: true,\r\n      secondaryIp:true,\r\n      ipv6Ips:true\r\n    };\r\n    const errors = this.validate(item.device, item.networkInterface, item.primaryIp, item.secondaryIp, item.ipv6Ips, item.subnet);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) {\r\n        this.forceUpdate();\r\n        return;\r\n    }\r\n    \r\n    \r\n    const hist= FRT_BASE_URL + '/ecc/' + item.ecc.id +'/eccNetworkInterfaces'; \r\n\r\n    item.ecc={id: item.ecc.id};\r\n    \r\n    //return;\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/eccs/' + (item.ecc.id) + '/eccNetworkInterfaces/'+(item.id) : API_BASE_URL + '/eccs/' + item.ecc.id + '/eccNetworkInterfaces', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(device, networkInterface, primaryIp, secondaryIp, ipv6Ips, subnet) {\r\n\r\n    const errors = { \r\n      device: '',\r\n      networkInterface: '',\r\n      primaryIp: '',\r\n      secondaryIp:'', \r\n      ipv6Ips:''\r\n    };\r\n    var sub = '';\r\n    var iprange = '';\r\n    var ip = '';\r\n    if(subnet && subnet.sCidr) \r\n    {\r\n      sub = subnet.sCidr.subnetCidr.split(\"/\");\r\n      iprange = sub[1];\r\n      ip = sub[0];\r\n    }\r\n    \r\n    if(this.state.item.touched.device && device.length === 0){\r\n      errors.device = 'device should not be null';\r\n      return errors;\r\n    }\r\n    if(this.state.item.touched.networkInterface && networkInterface.length === 0){\r\n      errors.networkInterface = 'networkInterface should not be null';\r\n      return errors;\r\n    }\r\n    if(this.state.item.touched.primaryIp && primaryIp.length !== 0 && !ipaddr.isValid(primaryIp) && sub  ){\r\n      errors.primaryIp = 'primaryIp should have Ip format';\r\n      return errors;\r\n    }\r\n    \r\n    if(this.state.item.touched.primaryIp && primaryIp.length !== 0 && ipaddr.isValid(primaryIp) && sub  ){\r\n\r\n      var addr = ipaddr.parse(primaryIp);\r\n      var range = ipaddr.parse(ip);\r\n      if(!addr.match(range, iprange))\r\n      {\r\n        errors.primaryIp = 'primaryIp should be in subnet cidr';\r\n        return errors;\r\n      }\r\n    }\r\n    if(this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && !ipaddr.isValid(secondaryIp) && sub ){\r\n      errors.secondaryIp = 'secondaryIp should have Ip format';\r\n      return errors;\r\n    }\r\n    if(this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && ipaddr.isValid(secondaryIp) && sub  ){\r\n      console.log('secondaryIp=' + secondaryIp);\r\n      var addr = ipaddr.parse(secondaryIp);\r\n      var range = ipaddr.parse(ip);\r\n      if(!addr.match(range, iprange))\r\n      {\r\n        \r\n        errors.secondaryIp = 'secondaryIp should be in subnet cidr';\r\n        return errors;\r\n      }\r\n    }\r\n    if(this.state.item.touched.secondaryIp && secondaryIp.length !== 0 && sub  &&\r\n      this.state.item.touched.primaryIp && primaryIp.length !== 0 && primaryIp === secondaryIp){\r\n      errors.secondaryIp = 'secondaryIp should be in different to secondaryIp';\r\n      return errors;\r\n    }\r\n    if(this.state.item.touched.ipv6Ips && ipv6Ips.length !== 0 && ipaddr.isValid(ipv6Ips)){\r\n      errors.ipv6Ips = 'ipv6Ips should have Ip format';\r\n      return errors;\r\n    }\r\n    // verfication des ip\r\n\r\n    return errors;\r\n  }\r\n\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit Ec2 NetworkInterface' : 'Add Ec2 NetworkInterface'}</h2>;\r\n\r\n    const errors = this.validate(item.device, item.networkInterface, item.primaryIp, item.secondaryIp, item.ipv6Ips, item.subnet);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = FRT_BASE_URL + \"/ecc/\" + item.ecc.id + \"/eccNetworkInterfaces\";\r\n\r\n    let ecc = null;\r\n    ecc = <FormGroup>\r\n            <Label for=\"eccId\">Ec2: {item.ecc.id}</Label>\r\n            <Input type=\"text\" name=\"eccId\" id=\"eccId\" value={item.ecc.id || ''} disabled=\"true\"/>\r\n          </FormGroup>;\r\n\r\n    let subnet = null; \r\n    \r\n    if(item.subnet && item.subnet.sCidr) {\r\n    subnet = <FormGroup>\r\n            <Label for=\"sub\">Subnet: {item.subnet.name} - {item.subnet.sCidr.subnetCidr}</Label>\r\n            <Input type=\"text\" name=\"sub\" id=\"sub\" value={item.subnet.id || ''} disabled=\"true\"/>\r\n          </FormGroup>;\r\n    }\r\n    \r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          \r\n          {ecc}\r\n          {subnet}\r\n           <FormGroup>\r\n            <Label for=\"device\">Device (*)</Label>\r\n            <Input type=\"text\" name=\"device\" id=\"device\" value={item.device || ''} placeholder=\"Enter device\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('device')} autoComplete=\"device\"\r\n                    valid={errors.device === ''}\r\n                   invalid={errors.device !== ''}\r\n            />\r\n           <FormFeedback>{errors.device}</FormFeedback>\r\n          </FormGroup>\r\n\r\n           <FormGroup>\r\n            <Label for=\"networkInterface\">Network Interface (*)</Label>  \r\n            <Input type=\"select\" name=\"networkInterface\" id=\"networkInterface\" value={item.networkInterface || ''} placeholder=\"Enter networkInterface\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('networkInterface')} \r\n                   valid={errors.networkInterface === ''}\r\n                   invalid={errors.networkInterface !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              <option value=\"New\">New</option>\r\n            </Input>\r\n           <FormFeedback>{errors.networkInterface}</FormFeedback>\r\n          </FormGroup>\r\n\r\n\r\n          <FormGroup>\r\n            <Label for=\"primaryIp\">Primary Ip (*)</Label>\r\n            <Input type=\"text\" name=\"primaryIp\" id=\"primaryIp\" value={item.primaryIp || ''} placeholder=\"Enter primaryIp\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('primaryIp')} autoComplete=\"primaryIp\"\r\n                   valid={errors.primaryIp === ''}\r\n                   invalid={errors.primaryIp !== ''}\r\n            />\r\n           <FormFeedback>{errors.primaryIp}</FormFeedback>\r\n          </FormGroup>\r\n \r\n          <FormGroup>\r\n            <Label for=\"secondaryIp\">Secondary Ip </Label> \r\n            <Input type=\"text\" name=\"secondaryIp\" id=\"secondaryIp\" value={item.secondaryIp || ''} placeholder=\"Enter secondaryIp\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('secondaryIp')} autoComplete=\"secondaryIp\"\r\n                   valid={errors.secondaryIp === ''}\r\n                   invalid={errors.secondaryIp !== ''}\r\n            />\r\n           <FormFeedback>{errors.secondaryIp}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"ipv6Ips\">Ipv6 Ip</Label>\r\n            <Input type=\"text\" name=\"ipv6Ips\" id=\"ipv6Ips\" value={item.ipv6Ips || ''} placeholder=\"Enter ipv6Ips\" disabled='true'\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('ipv6Ips')} autoComplete=\"ipv6Ips\"\r\n                   valid={errors.ipv6Ips === ''}\r\n                   invalid={errors.ipv6Ips !== ''}\r\n            />\r\n           <FormFeedback>{errors.ipv6Ips}</FormFeedback>\r\n          </FormGroup>\r\n          \r\n\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n\r\n            \r\n\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(EccNetworkInterfaceEdit);"]},"metadata":{},"sourceType":"module"}