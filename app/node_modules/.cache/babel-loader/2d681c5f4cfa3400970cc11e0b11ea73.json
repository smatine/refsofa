{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\DhcpEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { API_BASE_URL } from './constants';\n\nvar DhcpEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DhcpEdit, _Component);\n\n  function DhcpEdit(props) {\n    var _this;\n\n    _classCallCheck(this, DhcpEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DhcpEdit).call(this, props));\n    _this.emptyItem = {\n      name: '',\n      account: {},\n      accounts: {},\n      accountId: '',\n      domainName: '',\n      domainNameServers: '',\n      ntpServers: '',\n      netBiosNameServers: '',\n      netBiosNodeType: '',\n      vpc: {},\n      vpcs: {},\n      vpcId: '',\n      touched: {\n        name: false,\n        accountId: false,\n        vpcId: false,\n        domainName: false,\n        domainNameServers: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DhcpEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var dhcp, item, _dhcp;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/dhcps/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                dhcp = _context.sent;\n                dhcp.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  domainName: false,\n                  domainNameServers: false\n                };\n                this.setState({\n                  item: dhcp\n                });\n                _context.next = 10;\n                return fetch(API_BASE_URL + '/accounts/' + dhcp.account.id + '/vpcs').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.vpcs = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 10:\n                item = _objectSpread({}, this.state.item);\n                item.vpcId = dhcp.vpc.id;\n                item.accountId = dhcp.account.id;\n                this.setState({\n                  item: item\n                });\n                _context.next = 19;\n                break;\n\n              case 16:\n                _dhcp = {\n                  name: '',\n                  account: {},\n                  accounts: {},\n                  accountId: '',\n                  domainName: '',\n                  domainNameServers: '',\n                  ntpServers: '',\n                  netBiosNameServers: '',\n                  netBiosNodeType: '',\n                  vpc: {},\n                  vpcs: {},\n                  vpcId: '',\n                  touched: {\n                    name: false,\n                    accountId: false,\n                    vpcId: false,\n                    domainName: false,\n                    domainNameServers: false\n                  }\n                };\n                _dhcp.touched = {\n                  name: false,\n                  accountId: false,\n                  vpcId: false,\n                  domainName: false,\n                  domainNameServers: false\n                };\n                this.setState({\n                  item: _dhcp\n                });\n\n              case 19:\n                _context.next = 21;\n                return fetch(API_BASE_URL + '/accounts').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.accounts = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this3 = this;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      });\n\n      if (name === 'accountId') {\n        fetch(API_BASE_URL + '/accounts/' + item.accountId + '/vpcs').then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          var item = _objectSpread({}, _this3.state.item);\n\n          item.vpcs = jsonResult;\n\n          _this3.setState({\n            item: item\n          });\n        });\n        item.vpcId = '';\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  name: true,\n                  accountId: false,\n                  vpcId: true,\n                  domainName: true,\n                  domainNameServers: true\n                };\n                errors = this.validate(item.name, item.vpcId, item.domainName, item.domainNameServers, item.accountId);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = API_BASE_URL + '/dhcps';\n                item.vpc = {\n                  id: item.vpcId\n                };\n                item.account = {\n                  id: item.accountId\n                }; //console.log(\"sma\" + item.subnetgroupId);\n                //return;\n\n                _context2.next = 13;\n                return fetch(item.id ? API_BASE_URL + '/vpcs/' + item.vpc.id + '/dhcps/' + item.id : API_BASE_URL + '/vpcs/' + item.vpc.id + '/dhcps', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 13:\n                this.props.history.push(hist);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(name, vpcId, domainName, domainNameServers, accountId) {\n      var errors = {\n        name: '',\n        accountId: '',\n        vpcId: '',\n        domainName: '',\n        domainNameServers: ''\n      };\n\n      if (this.state.item.touched.name && name.length === 0) {\n        errors.name = 'Name should not be null';\n        return errors;\n      } else if (this.state.item.touched.accountId && accountId.length === 0) {\n        errors.accountId = 'accountId should not be null';\n        return errors;\n      } else if (this.state.item.touched.vpcId && vpcId.length === 0) {\n        errors.vpcId = 'Vpc should not be null';\n        return errors;\n      } else if (this.state.item.touched.domainName && domainName.length === 0) {\n        errors.domainName = 'domainName should not be null';\n        return errors;\n      } else if (this.state.item.touched.domainNameServers && domainNameServers.length === 0) {\n        errors.domainNameServers = 'domainNameServers should not be null';\n        return errors;\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, item.id ? 'Edit Dhcp Options Sets' : 'Add Dhcp Options Sets');\n      var errors = this.validate(item.name, item.vpcId, item.domainName, item.domainNameServers, item.accountId);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = API_BASE_URL + \"/dhcps\";\n      var optas = [];\n\n      if (item.accounts && item.accounts.length) {\n        item.accounts.map(function (s) {\n          optas.push(React.createElement(\"option\", {\n            key: s.id,\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, s.id, \" \", s.numAccount));\n        });\n      }\n\n      var account = item.accountId || '';\n      item.accountId = account;\n      var opts = [];\n\n      if (item.vpcs && item.vpcs.length) {\n        item.vpcs.map(function (s) {\n          opts.push(React.createElement(\"option\", {\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }, s.id, \" \", s.name));\n        });\n      }\n\n      var tri = item.vpcId || '';\n      item.vpcId = tri;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Name (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: item.name || '',\n        placeholder: \"Enter name\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('name'),\n        autoComplete: \"name\",\n        valid: errors.name === '',\n        invalid: errors.name !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, errors.name)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"accountId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"Account (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"accountId\",\n        id: \"accountId\",\n        value: account,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('accountId'),\n        valid: errors.accountId === '',\n        invalid: errors.accountId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"Choose\"), optas), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, errors.accountId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"vpcId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"Vpcs (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"vpcId\",\n        id: \"vpcId\",\n        value: tri,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('vpcId'),\n        valid: errors.vpcId === '',\n        invalid: errors.vpcId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"Choose\"), opts), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, errors.vpcId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"domainName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"Domain Name (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"domainName\",\n        id: \"domainName\",\n        value: item.domainName || '',\n        placeholder: \"Enter domainName\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('domainName'),\n        autoComplete: \"domainName\",\n        valid: errors.domainName === '',\n        invalid: errors.domainName !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, errors.domainName)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"domainNameServers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \"Domain Name Servers (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"domainNameServers\",\n        id: \"domainNameServers\",\n        value: item.domainNameServers || '',\n        placeholder: \"Enter domainNameServers\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('domainNameServers'),\n        autoComplete: \"domainNameServers\",\n        valid: errors.domainNameServers === '',\n        invalid: errors.domainNameServers !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, errors.domainNameServers)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"ntpServers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, \"Ntp Servers\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"ntpServers\",\n        id: \"ntpServers\",\n        value: item.ntpServers || '',\n        placeholder: \"Enter ntpServers\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('ntpServers'),\n        autoComplete: \"ntpServers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"netBiosNameServers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"NetBios Name Servers\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"netBiosNameServers\",\n        id: \"netBiosNameServers\",\n        value: item.netBiosNameServers || '',\n        placeholder: \"Enter netBiosNameServers\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('netBiosNameServers'),\n        autoComplete: \"netBiosNameServers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"netBiosNodeType\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"NetBios Node Type\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"netBiosNodeType\",\n        id: \"netBiosNodeType\",\n        value: item.netBiosNodeType || '',\n        placeholder: \"Enter netBiosNodeType\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('netBiosNodeType'),\n        autoComplete: \"netBiosNodeType\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return DhcpEdit;\n}(Component);\n\nexport default withRouter(DhcpEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\DhcpEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","AppNavbar","API_BASE_URL","DhcpEdit","props","emptyItem","name","account","accounts","accountId","domainName","domainNameServers","ntpServers","netBiosNameServers","netBiosNodeType","vpc","vpcs","vpcId","touched","handleBlur","field","evt","item","state","setState","handleChange","bind","handleSubmit","match","params","id","fetch","json","dhcp","then","result","jsonResult","event","target","value","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","method","headers","body","JSON","stringify","history","push","length","title","canc","optas","map","s","numAccount","opts","tri"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { API_BASE_URL } from './constants';\r\nclass DhcpEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n    account: {},\r\n    accounts: {},\r\n    accountId : '',\r\n    domainName: '',\r\n    domainNameServers: '',\r\n    ntpServers: '',\r\n    netBiosNameServers: '',\r\n    netBiosNodeType: '',\r\n    vpc: {},\r\n    vpcs: {},\r\n    vpcId : '',\r\n    touched: {\r\n      name: false,\r\n      accountId: false,\r\n      vpcId: false,\r\n      domainName: false,\r\n      domainNameServers: false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const dhcp = await (await fetch(`${API_BASE_URL}/dhcps/${this.props.match.params.id}`)).json();\r\n      dhcp.touched = {\r\n        name: false,\r\n        accountId: false,\r\n        vpcId: false,\r\n        domainName: false,\r\n        domainNameServers: false,\r\n      };\r\n      this.setState({item: dhcp});\r\n\r\n      await fetch(API_BASE_URL + '/accounts/' + (dhcp.account.id) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n\r\n      let item = {...this.state.item};\r\n      item.vpcId = dhcp.vpc.id;\r\n      item.accountId = dhcp.account.id;\r\n      this.setState({item: item});\r\n      \r\n    }\r\n    else {\r\n      const dhcp = {\r\n        name: '',\r\n        account: {},\r\n        accounts: {},\r\n        accountId : '',\r\n        domainName: '',\r\n        domainNameServers: '',\r\n        ntpServers: '',\r\n        netBiosNameServers: '',\r\n        netBiosNodeType: '',\r\n        vpc: {},\r\n        vpcs: {},\r\n        vpcId : '',\r\n        touched: {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          domainName: false,\r\n          domainNameServers: false,\r\n        }\r\n      };\r\n      dhcp.touched = {\r\n          name: false,\r\n          accountId: false,\r\n          vpcId: false,\r\n          domainName: false,\r\n          domainNameServers: false,\r\n      };\r\n      this.setState({item: dhcp});\r\n    }\r\n    \r\n    await fetch(API_BASE_URL + '/accounts',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.accounts = jsonResult;\r\n      this.setState({item: item});\r\n    });\r\n\r\n    /*await fetch('/vpcs',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.vpcs = jsonResult;\r\n      this.setState({item: item});\r\n    })*/\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n\r\n    if(name === 'accountId')\r\n    {\r\n       fetch(API_BASE_URL + '/accounts/' + (item.accountId) + '/vpcs',)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        let item = {...this.state.item};\r\n        item.vpcs = jsonResult;\r\n        this.setState({item: item});\r\n      });\r\n      item.vpcId = '';\r\n    }\r\n\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n          name: true,\r\n          accountId: false,\r\n          vpcId: true,\r\n          domainName: true,\r\n          domainNameServers: true\r\n    };\r\n    const errors = this.validate(item.name, item.vpcId, item.domainName, item.domainNameServers, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) {\r\n        this.forceUpdate();\r\n        return;\r\n    }\r\n    \r\n    const hist= API_BASE_URL + '/dhcps'; \r\n\r\n    item.vpc={id: item.vpcId};\r\n    item.account={id: item.accountId};\r\n    //console.log(\"sma\" + item.subnetgroupId);\r\n    //return;\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/vpcs/' + (item.vpc.id) + '/dhcps/'+(item.id) : API_BASE_URL + '/vpcs/' + item.vpc.id + '/dhcps', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(name, vpcId, domainName, domainNameServers, accountId) {\r\n\r\n    const errors = {\r\n      name: '' ,\r\n      accountId: '',\r\n      vpcId: '',\r\n      domainName: '', \r\n      domainNameServers: ''\r\n    };\r\n    \r\n    if(this.state.item.touched.name && name.length === 0){\r\n      errors.name = 'Name should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.accountId && accountId.length === 0){\r\n      errors.accountId = 'accountId should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.vpcId && vpcId.length === 0){\r\n      errors.vpcId = 'Vpc should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.domainName && domainName.length === 0){\r\n      errors.domainName = 'domainName should not be null';\r\n      return errors;\r\n    }\r\n    else if(this.state.item.touched.domainNameServers && domainNameServers.length === 0){\r\n      errors.domainNameServers = 'domainNameServers should not be null';\r\n      return errors;\r\n    }\r\n    \r\n    return errors;\r\n  }\r\n\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit Dhcp Options Sets' : 'Add Dhcp Options Sets'}</h2>;\r\n\r\n    const errors = this.validate(item.name, item.vpcId, item.domainName, item.domainNameServers, item.accountId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = API_BASE_URL + \"/dhcps\";\r\n\r\n    let optas = [];\r\n    if(item.accounts && item.accounts.length){\r\n      item.accounts.map(s => {  \r\n          optas.push(<option key={s.id} value={s.id}>{s.id} {s.numAccount}</option>);\r\n      });\r\n    }\r\n    let account = item.accountId || '';\r\n    item.accountId = account;\r\n\r\n    let opts = [];\r\n    if(item.vpcs && item.vpcs.length){\r\n      item.vpcs.map(s => {  \r\n          opts.push(<option value={s.id}>{s.id} {s.name}</option>);\r\n      });\r\n    }\r\n    let tri = item.vpcId || '';\r\n    item.vpcId = tri;\r\n\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"name\">Name (*)</Label>\r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''} placeholder=\"Enter name\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('name')} autoComplete=\"name\"\r\n                   valid={errors.name === ''}\r\n                   invalid={errors.name !== ''}\r\n            />\r\n           <FormFeedback>{errors.name}</FormFeedback>\r\n          </FormGroup>\r\n          \r\n          <FormGroup>\r\n            <Label for=\"accountId\">Account (*)</Label>\r\n            <Input type=\"select\" name=\"accountId\" id=\"accountId\"  value={account} onChange={this.handleChange} onBlur={this.handleBlur('accountId')}\r\n                 valid={errors.accountId === ''}\r\n                 invalid={errors.accountId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {optas}\r\n            </Input>\r\n            <FormFeedback>{errors.accountId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"vpcId\">Vpcs (*)</Label>\r\n            <Input type=\"select\" name=\"vpcId\" id=\"vpcId\"  value={tri} onChange={this.handleChange} onBlur={this.handleBlur('vpcId')}\r\n                 valid={errors.vpcId === ''}\r\n                 invalid={errors.vpcId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {opts}\r\n            </Input>\r\n            <FormFeedback>{errors.vpcId}</FormFeedback>\r\n          </FormGroup>\r\n         \r\n         \r\n         <FormGroup>\r\n            <Label for=\"domainName\">Domain Name (*)</Label>\r\n            <Input type=\"text\" name=\"domainName\" id=\"domainName\" value={item.domainName || ''} placeholder=\"Enter domainName\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('domainName')} autoComplete=\"domainName\"\r\n                   valid={errors.domainName === ''}\r\n                   invalid={errors.domainName !== ''}\r\n            />\r\n           <FormFeedback>{errors.domainName}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"domainNameServers\">Domain Name Servers (*)</Label>\r\n            <Input type=\"text\" name=\"domainNameServers\" id=\"domainNameServers\" value={item.domainNameServers || ''} placeholder=\"Enter domainNameServers\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('domainNameServers')} autoComplete=\"domainNameServers\"\r\n                   valid={errors.domainNameServers === ''}\r\n                   invalid={errors.domainNameServers !== ''}\r\n            />\r\n           <FormFeedback>{errors.domainNameServers}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"ntpServers\">Ntp Servers</Label>\r\n            <Input type=\"text\" name=\"ntpServers\" id=\"ntpServers\" value={item.ntpServers || ''} placeholder=\"Enter ntpServers\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('ntpServers')} autoComplete=\"ntpServers\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"netBiosNameServers\">NetBios Name Servers</Label>\r\n            <Input type=\"text\" name=\"netBiosNameServers\" id=\"netBiosNameServers\" value={item.netBiosNameServers || ''} placeholder=\"Enter netBiosNameServers\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('netBiosNameServers')} autoComplete=\"netBiosNameServers\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"netBiosNodeType\">NetBios Node Type</Label>\r\n            <Input type=\"text\" name=\"netBiosNodeType\" id=\"netBiosNodeType\" value={item.netBiosNodeType || ''} placeholder=\"Enter netBiosNodeType\"\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('netBiosNodeType')} autoComplete=\"netBiosNodeType\"\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n\r\n            \r\n\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(DhcpEdit);"]},"metadata":{},"sourceType":"module"}