{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\UserEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback, FormText } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport Select from 'react-select';\nimport { API_BASE_URL, FRT_BASE_URL } from './constants';\n\nvar UserEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserEdit, _Component);\n\n  function UserEdit(props) {\n    var _this;\n\n    _classCallCheck(this, UserEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserEdit).call(this, props));\n    _this.emptyItem = {\n      name: '',\n      account: {},\n      accounts: [],\n      accountId: '',\n      groups: [],\n      groupss: [],\n      groupId: [],\n      programmaticAccess: false,\n      consoleAccess: false,\n      requirePasswordReset: true,\n      autogeneratedPassword: true,\n      customPassword: '',\n      touched: {\n        name: false,\n        accountId: false,\n        groupId: false,\n        customPassword: false,\n        programmaticAccess: false,\n        consoleAccess: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.onOptionChange = function (selectName, selectedOption) {\n      var item = _this.state.item;\n      var options = selectedOption;\n      var values = [];\n\n      if (selectName === 'groupId') {\n        for (var i = 0, l = options.length; i < l; i++) {\n          if (item.groupss && item.groupss.length) {\n            item.groupss.map(function (s) {\n              if (s.id == options[i].value) {\n                values.push({\n                  \"id\": s.id\n                });\n              }\n            });\n          }\n        }\n\n        item.groups = values;\n      }\n\n      _this.setState({\n        item: item\n      });\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UserEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var user, account, item, values, _user;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/users/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                user = _context.sent;\n                user.touched = {\n                  name: false,\n                  accountId: false,\n                  groupId: false,\n                  customPassword: false,\n                  programmaticAccess: false,\n                  consoleAccess: false\n                };\n                this.setState({\n                  item: user\n                });\n                account = {};\n                _context.next = 11;\n                return fetch(API_BASE_URL + \"/accounts/\" + user.account.id).then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  account = jsonResult;\n                  fetch(API_BASE_URL + '/accounts/' + account.id + '/groups').then(function (result) {\n                    return result.json();\n                  }).then(function (jsonResult) {\n                    var item = _objectSpread({}, _this2.state.item);\n\n                    item.groupss = jsonResult;\n\n                    _this2.setState({\n                      item: item\n                    });\n                  });\n                });\n\n              case 11:\n                item = _objectSpread({}, this.state.item);\n                item.accountId = user.account.id;\n                values = [];\n                item.groups.map(function (s) {\n                  values.push({\n                    \"id\": s.id\n                  });\n                });\n                item.groups = values;\n                this.setState({\n                  item: item\n                });\n                _context.next = 22;\n                break;\n\n              case 19:\n                _user = {\n                  name: '',\n                  account: {},\n                  accounts: [],\n                  accountId: '',\n                  groups: [],\n                  groupss: [],\n                  groupId: [],\n                  programmaticAccess: false,\n                  consoleAccess: false,\n                  requirePasswordReset: true,\n                  autogeneratedPassword: true,\n                  customPassword: '',\n                  touched: {\n                    name: false,\n                    accountId: false,\n                    groupId: false,\n                    customPassword: false,\n                    programmaticAccess: false,\n                    consoleAccess: false\n                  }\n                };\n                _user.touched = {\n                  name: false,\n                  accountId: false,\n                  groupId: false,\n                  customPassword: false,\n                  programmaticAccess: false,\n                  consoleAccess: false\n                };\n                this.setState({\n                  item: _user\n                });\n\n              case 22:\n                _context.next = 24;\n                return fetch(API_BASE_URL + '/accounts').then(function (result) {\n                  return result.json();\n                }).then(function (jsonResult) {\n                  var item = _objectSpread({}, _this2.state.item);\n\n                  item.accounts = jsonResult;\n\n                  _this2.setState({\n                    item: item\n                  });\n                });\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _this3 = this;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      });\n\n      if (name === 'programmaticAccess') {\n        item.programmaticAccess = target.checked ? true : false;\n      }\n\n      if (name === 'consoleAccess') {\n        item.consoleAccess = target.checked ? true : false;\n      }\n\n      if (name === 'requirePasswordReset') {\n        item.requirePasswordReset = target.checked ? true : false;\n      }\n\n      if (name === 'type') {\n        if (value === 'Auto') {\n          item.autogeneratedPassword = true;\n        } else {\n          item.autogeneratedPassword = false;\n        }\n      }\n\n      if (name === 'accountId') {\n        var account = {};\n        fetch(API_BASE_URL + \"/accounts/\" + item.accountId).then(function (result) {\n          return result.json();\n        }).then(function (jsonResult) {\n          account = jsonResult;\n          fetch(API_BASE_URL + '/accounts/' + account.id + '/groups').then(function (result) {\n            return result.json();\n          }).then(function (jsonResult) {\n            var item = _objectSpread({}, _this3.state.item);\n\n            item.groupss = jsonResult;\n\n            _this3.setState({\n              item: item\n            });\n          });\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  name: true,\n                  accountId: true,\n                  groupId: true,\n                  customPassword: true,\n                  programmaticAccess: true,\n                  consoleAccess: true\n                };\n                errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = FRT_BASE_URL + '/users';\n                item.account = {\n                  id: item.accountId\n                };\n\n                if (!item.consoleAccess) {\n                  //item.programmaticAccess = false;\n                  //item.consoleAccess: false;\n                  item.requirePasswordReset = true;\n                  item.autogeneratedPassword = true;\n                  item.customPassword = '';\n                }\n\n                _context2.next = 13;\n                return fetch(item.id ? API_BASE_URL + '/accounts/' + item.account.id + '/users/' + item.id : API_BASE_URL + '/accounts/' + item.account.id + '/users', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 13:\n                this.props.history.push(hist);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(name, accountId, groupId, customPassword, programmaticAccess, consoleAccess) {\n      var errors = {\n        name: '',\n        accountId: '',\n        groupId: '',\n        customPassword: '',\n        programmaticAccess: '',\n        consoleAccess: ''\n      };\n\n      if (this.state.item.touched.name && name.length === 0) {\n        errors.name = 'Name should not be null';\n        return errors;\n      }\n\n      if (this.state.item.touched.accountId && accountId.length === 0) {\n        errors.accountId = 'Vpc should not be null';\n        return errors;\n      }\n\n      if (this.state.item.consoleAccess && !this.state.item.autogeneratedPassword && this.state.item.touched.customPassword && customPassword.length === 0) {\n        errors.customPassword = 'customPassword should not be null';\n        return errors;\n      }\n\n      if (!consoleAccess && !programmaticAccess) {\n        errors.programmaticAccess = 'Choose between programmaticAccess and consoleAccess';\n        errors.consoleAccess = 'Choose between programmaticAccess and consoleAccess';\n        return errors;\n      }\n      /*\r\n          if(this.state.item.touched.groupId  && this.state.item.groups.length === 0){\r\n            errors.groupId = 'Add groupId.';\r\n            return errors;\r\n          }\r\n      */\n\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, item.id ? 'Edit User' : 'Add User');\n      var errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = FRT_BASE_URL + \"/users\";\n      var opts = [];\n\n      if (item.accounts && item.accounts.length) {\n        item.accounts.map(function (s) {\n          opts.push(React.createElement(\"option\", {\n            value: s.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316\n            },\n            __self: this\n          }, s.id, \" \", s.name));\n        });\n      }\n\n      var account = item.accountId || '';\n      item.accountId = account;\n      var isUsed = false; //if(item.id !== '' && (item.users && item.users.length !== 0)  ) isUsed = true; \n\n      var optsp = [];\n      var optsps = [];\n\n      if (item.groupss && item.groupss.length) {\n        item.groupss.map(function (s) {\n          if (item.groups && item.groups.length) item.groups.map(function (ss) {\n            if (s.id == ss.id) {\n              optsp.push({\n                value: s.id,\n                label: s.name\n              });\n            }\n          });\n          optsps.push({\n            value: s.id,\n            label: s.name\n          });\n        });\n      }\n\n      var autogeneratedPassword = item.autogeneratedPassword; //console.log(\"item.autogeneratedPassword=\" + item.autogeneratedPassword);\n\n      var customPassword = item.consoleAccess && !item.autogeneratedPassword ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"customPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"Custom Password (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"customPassword\",\n        id: \"customPassword\",\n        value: item.customPassword || '',\n        placeholder: \"Enter customPassword\",\n        disabled: isUsed,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('customPassword'),\n        autoComplete: \"customPassword\",\n        valid: errors.customPassword === '',\n        invalid: errors.customPassword !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, errors.customPassword)) : '';\n      var requirePasswordReset = item.consoleAccess === true ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"requirePasswordReset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, \"Require password reset\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Input, {\n        type: \"checkbox\",\n        name: \"requirePasswordReset\",\n        id: \"requirePasswordReset\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('requirePasswordReset'),\n        checked: item.requirePasswordReset === true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, \"User must create a new password at next sign-in.\")) : '';\n      var consolePassword = item.consoleAccess === true ? React.createElement(FormGroup, {\n        tag: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \"Health Check Type (*)\"), React.createElement(FormGroup, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"type\",\n        id: \"type\",\n        value: \"Auto\",\n        checked: autogeneratedPassword === true,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('type'),\n        autoComplete: \"type\",\n        valid: errors.type === '',\n        invalid: errors.type !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }), ' ', \"Autogenerated password\")), React.createElement(FormGroup, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(Label, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"radio\",\n        name: \"type\",\n        id: \"type\",\n        value: \"Custom\",\n        checked: autogeneratedPassword === false,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('type'),\n        autoComplete: \"type\",\n        valid: errors.type === '',\n        invalid: errors.type !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }), ' ', \"Custom password\")), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, errors.type)) : '';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, \"Name (*)\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: item.name || '',\n        placeholder: \"Enter name\",\n        disabled: isUsed,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('name'),\n        autoComplete: \"name\",\n        valid: errors.name === '',\n        invalid: errors.name !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, errors.name)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"accountId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }, \"Account (*)\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"accountId\",\n        id: \"accountId\",\n        value: account,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('accountId'),\n        disabled: isUsed,\n        valid: errors.accountId === '',\n        invalid: errors.accountId !== '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \"Choose\"), opts), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, errors.accountId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"groupId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, \"Groups\"), React.createElement(Select, {\n        name: \"groupId\",\n        id: \"groupId\",\n        placeholder: \"Enter groupId\",\n        isMulti: true,\n        disabled: isUsed,\n        value: optsp,\n        onChange: function onChange(e) {\n          return _this4.onOptionChange(\"groupId\", e);\n        },\n        onBlur: this.handleBlur('groupId'),\n        options: optsps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, errors.groupId)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"programmaticAccess \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"Programmatic access\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Input, {\n        type: \"checkbox\",\n        name: \"programmaticAccess\",\n        id: \"programmaticAccess\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('programmaticAccess'),\n        checked: item.programmaticAccess === true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, errors.programmaticAccess), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, \"Enables an access key ID and secret access key for the AWS API, CLI, SDK, and other development tools.\")), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"consoleAccess\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, \"AWS Management Console access\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Input, {\n        type: \"checkbox\",\n        name: \"consoleAccess\",\n        id: \"consoleAccess\",\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('consoleAccess'),\n        checked: item.consoleAccess === true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, errors.consoleAccess), React.createElement(FormText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \"Enables a password that allows users to sign-in to the AWS Management Console.\")), consolePassword, customPassword, requirePasswordReset, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return UserEdit;\n}(Component);\n\nexport default withRouter(UserEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\UserEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","FormText","AppNavbar","Select","API_BASE_URL","FRT_BASE_URL","UserEdit","props","emptyItem","name","account","accounts","accountId","groups","groupss","groupId","programmaticAccess","consoleAccess","requirePasswordReset","autogeneratedPassword","customPassword","touched","handleBlur","field","evt","item","state","setState","onOptionChange","selectName","selectedOption","options","values","i","l","length","map","s","id","value","push","handleChange","bind","handleSubmit","match","params","fetch","json","user","then","result","jsonResult","event","target","checked","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","method","headers","body","JSON","stringify","history","title","canc","opts","isUsed","optsp","optsps","ss","label","consolePassword","type","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback, FormText } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport Select from 'react-select';\r\nimport { API_BASE_URL, FRT_BASE_URL } from './constants';\r\n\r\nclass UserEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n\t  account: {},\r\n    accounts: [],\r\n  \taccountId : '',\r\n    groups: [],\r\n    groupss: [],\r\n    groupId: [],\r\n    programmaticAccess: false, \r\n    consoleAccess: false,\r\n    requirePasswordReset: true,\r\n    autogeneratedPassword: true,\r\n    customPassword: '',\r\n    touched: {\r\n      name: false,\r\n      accountId: false,\r\n      groupId: false,\r\n      customPassword: false,\r\n      programmaticAccess:false,\r\n      consoleAccess:false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n\r\n      const user = await (await fetch(`${API_BASE_URL}/users/${this.props.match.params.id}`)).json();\r\n      user.touched = {\r\n        name: false,\r\n        accountId: false,\r\n        groupId: false,\r\n        customPassword: false,\r\n        programmaticAccess:false,\r\n        consoleAccess:false\r\n      };\r\n      this.setState({item: user});\r\n\r\n      let account={};\r\n      await (await fetch(API_BASE_URL + \"/accounts/\" + user.account.id,)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        account = jsonResult;\r\n        fetch(API_BASE_URL + '/accounts/' + (account.id) + '/groups',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          let item = {...this.state.item};\r\n          item.groupss = jsonResult;\r\n          this.setState({item: item});\r\n        });\r\n      }));\r\n      \r\n      let item = {...this.state.item};\r\n      item.accountId = user.account.id;\r\n      var values = [];\r\n      item.groups.map(s => { \r\n        values.push({\"id\": s.id});\r\n      });\r\n      item.groups = values;\r\n      \r\n      this.setState({item: item});\r\n      \r\n    }\r\n    else {\r\n      const user = {\r\n        name: '',\r\n        account: {},\r\n        accounts: [],\r\n        accountId : '',\r\n        groups: [],\r\n        groupss: [],\r\n        groupId: [],\r\n        programmaticAccess: false,\r\n        consoleAccess: false,\r\n        requirePasswordReset: true,\r\n        autogeneratedPassword: true,\r\n        customPassword: '',\r\n        touched: {\r\n          name: false,\r\n          accountId: false,\r\n          groupId: false,\r\n          customPassword: false,\r\n          programmaticAccess:false,\r\n          consoleAccess:false\r\n        }\r\n      };\r\n      user.touched = {\r\n          name: false,\r\n          accountId: false,\r\n          groupId: false,\r\n          customPassword: false,\r\n          programmaticAccess:false,\r\n          consoleAccess:false\r\n      };\r\n      this.setState({item: user});\r\n    }\r\n\r\n    await fetch(API_BASE_URL + '/accounts',)\r\n    .then((result) => {\r\n      return result.json();\r\n    }).then((jsonResult) => {\r\n      let item = {...this.state.item};\r\n      item.accounts = jsonResult;\r\n      this.setState({item: item});\r\n    })\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n     \r\n    if(name === 'programmaticAccess')\r\n    {\r\n      item.programmaticAccess = (target.checked) ? true: false;\r\n    \r\n    }\r\n    if(name === 'consoleAccess')\r\n    {\r\n      item.consoleAccess = (target.checked) ? true: false;\r\n    \r\n    }\r\n    if(name === 'requirePasswordReset')\r\n    {\r\n      item.requirePasswordReset = (target.checked) ? true: false;\r\n    \r\n    }\r\n    if(name === 'type')\r\n    {\r\n      if(value === 'Auto'){\r\n        item.autogeneratedPassword = true;\r\n      }\r\n      else\r\n      {\r\n        item.autogeneratedPassword = false;\r\n      }\r\n    }\r\n\r\n    if(name === 'accountId')\r\n    {\r\n\r\n      let account={};\r\n      fetch(API_BASE_URL + \"/accounts/\" + item.accountId,)\r\n      .then((result) => {\r\n        return result.json();\r\n      }).then((jsonResult) => {\r\n        account = jsonResult;\r\n        fetch(API_BASE_URL + '/accounts/' + (account.id) + '/groups',)\r\n        .then((result) => { \r\n          return result.json();\r\n        }).then((jsonResult) => {\r\n          let item = {...this.state.item};\r\n          item.groupss = jsonResult;\r\n          this.setState({item: item});\r\n        });\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n      name: true,\r\n      accountId: true,\r\n      groupId: true,\r\n      customPassword: true,\r\n      programmaticAccess:true,\r\n      consoleAccess:true\r\n    };\r\n    const errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);\r\n\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) {\r\n        this.forceUpdate();\r\n        return;\r\n    }\r\n    \r\n    const hist= FRT_BASE_URL + '/users'; \r\n\r\n    item.account={id: item.accountId};\r\n    \r\n    if(!item.consoleAccess)\r\n    {\r\n      //item.programmaticAccess = false;\r\n      //item.consoleAccess: false;\r\n      item.requirePasswordReset = true;\r\n      item.autogeneratedPassword = true;\r\n      item.customPassword  = '';\r\n    }\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/accounts/' + (item.account.id) + '/users/'+(item.id) : API_BASE_URL + '/accounts/' + item.account.id + '/users', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(name, accountId,  groupId, customPassword, programmaticAccess, consoleAccess) {\r\n\r\n    const errors = {\r\n      name: '' ,\r\n      accountId: '',\r\n      groupId: '',\r\n      customPassword: '',\r\n      programmaticAccess:'', \r\n      consoleAccess:''\r\n    };\r\n    \r\n\r\n    if(this.state.item.touched.name && name.length === 0){\r\n      errors.name = 'Name should not be null';\r\n      return errors;\r\n    }\r\n    \r\n    if(this.state.item.touched.accountId && accountId.length === 0){\r\n      errors.accountId = 'Vpc should not be null';\r\n      return errors;\r\n    }\r\n\r\n    if(this.state.item.consoleAccess && !this.state.item.autogeneratedPassword && this.state.item.touched.customPassword && customPassword.length === 0){\r\n      errors.customPassword = 'customPassword should not be null';\r\n      return errors;\r\n    }\r\n\r\n    if(!consoleAccess && !programmaticAccess) {\r\n      \r\n      errors.programmaticAccess = 'Choose between programmaticAccess and consoleAccess';\r\n      errors.consoleAccess = 'Choose between programmaticAccess and consoleAccess';\r\n      return errors;\r\n    }\r\n\r\n/*\r\n    if(this.state.item.touched.groupId  && this.state.item.groups.length === 0){\r\n      errors.groupId = 'Add groupId.';\r\n      return errors;\r\n    }\r\n*/  \r\n    return errors;\r\n  }\r\n\r\n\r\n  onOptionChange = (selectName,selectedOption) => {\r\n      const {item} = this.state;\r\n      var options = selectedOption;\r\n      var values = [];\r\n      if(selectName === 'groupId') \r\n      {\r\n        for (var i = 0, l = options.length; i < l; i++) {      \r\n          if(item.groupss && item.groupss.length){\r\n              item.groupss.map(s => { \r\n                if(s.id == options[i].value) {\r\n                    values.push({\"id\": s.id});\r\n                }\r\n            });\r\n          }\r\n        }\r\n        item.groups = values;\r\n      }\r\n      \r\n      this.setState({item});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit User' : 'Add User'}</h2>;\r\n\r\n    const errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = FRT_BASE_URL + \"/users\";\r\n\r\n    \r\n    let opts = [];\r\n    if(item.accounts && item.accounts.length){\r\n      item.accounts.map(s => {  \r\n          opts.push(<option value={s.id}>{s.id} {s.name}</option>);\r\n      });\r\n    }\r\n    let account = item.accountId || '';\r\n    item.accountId = account;\r\n\r\n    let isUsed = false; \r\n    //if(item.id !== '' && (item.users && item.users.length !== 0)  ) isUsed = true; \r\n    \r\n    let optsp = [];  \r\n    let optsps = [];\r\n    if(item.groupss && item.groupss.length){\r\n      item.groupss.map(s => {  \r\n          if(item.groups && item.groups.length) item.groups.map(ss => {\r\n             if(s.id == ss.id) {\r\n               optsp.push({value: s.id, label: s.name});\r\n             }\r\n          });\r\n          optsps.push({value: s.id, label: s.name});\r\n      });\r\n    }\r\n\r\n    const autogeneratedPassword = item.autogeneratedPassword;\r\n    //console.log(\"item.autogeneratedPassword=\" + item.autogeneratedPassword);\r\n\r\n    const customPassword = (item.consoleAccess && !item.autogeneratedPassword) ? <FormGroup>\r\n            <Label for=\"customPassword\">Custom Password (*)</Label> \r\n            <Input type=\"text\" name=\"customPassword\" id=\"customPassword\" value={item.customPassword || ''} placeholder=\"Enter customPassword\" disabled={isUsed}\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('customPassword')} autoComplete=\"customPassword\"\r\n                   valid={errors.customPassword === ''}\r\n                   invalid={errors.customPassword !== ''}\r\n            />\r\n           <FormText></FormText>\r\n           <FormFeedback>{errors.customPassword}</FormFeedback>\r\n          </FormGroup> : ''\r\n    \r\n    const requirePasswordReset = (item.consoleAccess === true) ? <FormGroup > \r\n            <Label for=\"requirePasswordReset\">Require password reset</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Input type=\"checkbox\" name=\"requirePasswordReset\" id=\"requirePasswordReset\" \r\n                    onChange={this.handleChange} onBlur={this.handleBlur('requirePasswordReset')} \r\n                    checked={item.requirePasswordReset === true}/>\r\n            \r\n            <FormText>User must create a new password at next sign-in.</FormText>\r\n          </FormGroup> : ''\r\n    \r\n    \r\n\r\n    const consolePassword = (item.consoleAccess === true) ? <FormGroup tag=\"fieldset\">\r\n            <Label for=\"type\">Health Check Type (*)</Label>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"type\" id=\"type\" value=\"Auto\" checked={autogeneratedPassword === true}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('type')} autoComplete=\"type\"\r\n                       valid={errors.type === ''}\r\n                       invalid={errors.type !== ''}\r\n                />{' '}\r\n                Autogenerated password\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input type=\"radio\" name=\"type\" id=\"type\" value=\"Custom\" checked={autogeneratedPassword === false}\r\n                       onChange={this.handleChange} onBlur={this.handleBlur('type')} autoComplete=\"type\"\r\n                       valid={errors.type === ''}\r\n                       invalid={errors.type !== ''}\r\n                />{' '}\r\n                Custom password\r\n              </Label>\r\n            </FormGroup>\r\n            <FormFeedback>{errors.type}</FormFeedback>\r\n          </FormGroup> : ''\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n \r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"name\">Name (*)</Label> \r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''} placeholder=\"Enter name\" disabled={isUsed}\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('name')} autoComplete=\"name\"\r\n                   valid={errors.name === ''}\r\n                   invalid={errors.name !== ''}\r\n            />\r\n           <FormText></FormText>\r\n           <FormFeedback>{errors.name}</FormFeedback>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"accountId\">Account (*)</Label>\r\n            <Input type=\"select\" name=\"accountId\" id=\"accountId\"  value={account} onChange={this.handleChange} onBlur={this.handleBlur('accountId')} disabled={isUsed}\r\n                 valid={errors.accountId === ''}\r\n                 invalid={errors.accountId !== ''}\r\n            >\r\n              <option value=\"\" disabled>Choose</option>\r\n              {opts}\r\n            </Input>\r\n            <FormFeedback>{errors.accountId}</FormFeedback>\r\n          </FormGroup>\r\n\r\n\r\n          <FormGroup>\r\n            <Label for=\"groupId\">Groups</Label>\r\n            <Select name=\"groupId\" id=\"groupId\"  placeholder=\"Enter groupId\" isMulti disabled={isUsed}\r\n              value={optsp}\r\n              onChange={e => this.onOptionChange(\"groupId\",e)}\r\n              onBlur={this.handleBlur('groupId')}\r\n              options={optsps}\r\n\r\n            />\r\n            <FormFeedback>{errors.groupId}</FormFeedback> \r\n          </FormGroup>\r\n\r\n          <FormGroup > \r\n            <Label for=\"programmaticAccess \">Programmatic access</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Input type=\"checkbox\" name=\"programmaticAccess\" id=\"programmaticAccess\" \r\n                    onChange={this.handleChange} onBlur={this.handleBlur('programmaticAccess')} \r\n                    checked={item.programmaticAccess === true}/>\r\n            <FormFeedback>{errors.programmaticAccess}</FormFeedback> \r\n            <FormText>Enables an access key ID and secret access key for the AWS API, CLI, SDK, and other development tools.</FormText>\r\n          </FormGroup>\r\n\r\n          <FormGroup > \r\n            <Label for=\"consoleAccess\">AWS Management Console access</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Input type=\"checkbox\" name=\"consoleAccess\" id=\"consoleAccess\" \r\n                    onChange={this.handleChange} onBlur={this.handleBlur('consoleAccess')} \r\n                    checked={item.consoleAccess === true}/>\r\n            <FormFeedback>{errors.consoleAccess}</FormFeedback> \r\n            <FormText>Enables a password that allows users to sign-in to the AWS Management Console.</FormText>\r\n          </FormGroup>\r\n\r\n          {consolePassword}\r\n          {customPassword}\r\n          {requirePasswordReset}\r\n          \r\n          \r\n\r\n\r\n\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(UserEdit);"]},"metadata":{},"sourceType":"module"}