{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\ref\\\\referentiel\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\ref\\\\referentiel\\\\app\\\\src\\\\SubnetManageEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { API_BASE_URL } from './constants';\n\nvar cidrRegex = require('cidr-regex'); //also npm install range_check\n\n\nvar SubnetManageEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SubnetManageEdit, _Component);\n\n  function SubnetManageEdit(props) {\n    var _this;\n\n    _classCallCheck(this, SubnetManageEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SubnetManageEdit).call(this, props));\n    _this.emptyItem = {\n      subnetCidr: '',\n      text: '',\n      cidr: '',\n      subnet: {},\n      touched: {\n        subnetCidr: false,\n        cidrId: false\n      }\n    };\n\n    _this.handleBlur = function (field) {\n      return function (evt) {\n        var item = _objectSpread({}, _this.state.item);\n\n        item.touched = _objectSpread({}, _this.state.item.touched, _defineProperty({}, field, true));\n\n        _this.setState({\n          item: item\n        });\n      };\n    };\n\n    _this.state = {\n      item: _this.emptyItem\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SubnetManageEdit, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var subnetCidr, cidr, _subnetCidr;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.match.params.id !== 'new')) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(\"\".concat(API_BASE_URL, \"/subnetcidrs/\").concat(this.props.match.params.id));\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                subnetCidr = _context.sent;\n                subnetCidr.touched = {\n                  subnetCidr: false,\n                  cidrId: false\n                };\n                this.setState({\n                  item: subnetCidr\n                });\n                _context.next = 19;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return fetch(\"\".concat(API_BASE_URL, \"/cidrs/\").concat(this.props.match.params.idc));\n\n              case 12:\n                _context.next = 14;\n                return _context.sent.json();\n\n              case 14:\n                cidr = _context.sent;\n                _subnetCidr = {\n                  subnetCidr: '',\n                  text: '',\n                  cidr: '',\n                  subnet: {},\n                  touched: {\n                    subnetCidr: false,\n                    cidrId: false\n                  }\n                };\n                _subnetCidr.cidr = cidr;\n                _subnetCidr.touched = {\n                  subnetCidr: false,\n                  cidrId: false\n                };\n                this.setState({\n                  item: _subnetCidr\n                });\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n\n      var item = _objectSpread({}, this.state.item);\n\n      item[name] = value;\n      this.setState({\n        item: item\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var item, errors, isDisabled, hist, t;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                item = this.state.item;\n                item.touched = {\n                  subnetCidr: true,\n                  cidrId: true\n                };\n                errors = this.validate(item.subnetCidr, item.cidrId);\n                isDisabled = Object.keys(errors).some(function (x) {\n                  return errors[x];\n                });\n\n                if (!isDisabled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.forceUpdate();\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                hist = API_BASE_URL + '/vpcmanages/' + item.cidr.id + '/subnetmanage'; // /vpcmanages/:idc/subnetmanage/:id\n\n                t = 0;\n\n                if (item.id && item.subnet && item.subnet.id) {\n                  //console.log(\"subnet\");\n                  t = item.subnet.id;\n                  item.subnet = {};\n                } else {\n                  item.subnet = null;\n                } //console.log(\"subnet\" + item.subnet.id);\n\n\n                _context2.next = 13;\n                return fetch(item.id ? API_BASE_URL + '/cidrs/' + item.cidr.id + '/subnetcidrs/' + item.id + '/subnet/' + t : API_BASE_URL + '/cidrs/' + item.cidr.id + '/subnetcidrs', {\n                  method: item.id ? 'PUT' : 'POST',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(item)\n                });\n\n              case 13:\n                this.props.history.push(hist);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(subnetCidr, cidrId) {\n      var errors = {\n        subnetCidr: '',\n        cidrId: ''\n      };\n\n      if (this.state.item.touched.subnetCidr && subnetCidr.length === 0) {\n        errors.subnetCidr = 'subnet should not be null';\n        return errors;\n      }\n\n      if (this.state.item.touched.subnetCidr && !cidrRegex({\n        exact: true\n      }).test(subnetCidr)) {\n        errors.subnetCidr = 'subnet should  be a cidr format';\n        return errors;\n      }\n      /*if(!this.state.item.id && this.state.item.touched.trigrammeId && trigrammeId.length === 0){\r\n        errors.trigrammeId = 'trigramme should not be null';\r\n        return errors;\r\n      }*/\n\n\n      return errors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.state.item;\n      var title = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, item.id ? 'Edit Subnet Cidr' : 'Add Subnet Cidr');\n      var errors = this.validate(item.subnetCidr, item.cidrId);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var canc = API_BASE_URL + \"/vpcmanages/\" + item.cidr.id + \"/subnetmanage\"; // /vpcmanages/:idc/subnetmanage/:id\n\n      var cidrs = null;\n      cidrs = React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"cidrId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Cidr: \", item.cidr.cidr), React.createElement(Input, {\n        type: \"text\",\n        name: \"cidrId\",\n        id: \"cidrId\",\n        value: item.cidr.id || '',\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }));\n      var isDisabledd = false;\n      if (item.subnet && item.subnet.id) isDisabledd = true;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(AppNavbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, title, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"subnetCidr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Subnet\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"subnetCidr\",\n        id: \"subnetCidr\",\n        value: item.subnetCidr || '',\n        onChange: this.handleChange,\n        onBlur: this.handleBlur('subnetCidr'),\n        autoComplete: \"subnetCidr\",\n        valid: errors.subnetCidr === '',\n        invalid: errors.subnetCidr !== '',\n        disabled: isDisabledd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, errors.subnetCidr)), cidrs, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"text\",\n        id: \"text\",\n        value: item.text || '',\n        onChange: this.handleChange,\n        autoComplete: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        tag: Link,\n        to: canc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return SubnetManageEdit;\n}(Component);\n\nexport default withRouter(SubnetManageEdit);","map":{"version":3,"sources":["C:\\ref\\referentiel\\app\\src\\SubnetManageEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","FormFeedback","AppNavbar","API_BASE_URL","cidrRegex","require","SubnetManageEdit","props","emptyItem","subnetCidr","text","cidr","subnet","touched","cidrId","handleBlur","field","evt","item","state","setState","handleChange","bind","handleSubmit","match","params","id","fetch","json","idc","event","target","value","name","preventDefault","errors","validate","isDisabled","Object","keys","some","x","forceUpdate","hist","t","method","headers","body","JSON","stringify","history","push","length","exact","test","title","canc","cidrs","isDisabledd"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label, FormFeedback } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { API_BASE_URL } from './constants';\r\n\r\nconst cidrRegex = require('cidr-regex');\r\n//also npm install range_check\r\nclass SubnetManageEdit extends Component {\r\n\r\n  emptyItem = {\r\n    subnetCidr: '',\r\n    text: '',\r\n\t  cidr: '',\r\n    subnet: {},\r\n    touched: {\r\n      subnetCidr: false,\r\n      cidrId: false\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const subnetCidr = await (await fetch(`${API_BASE_URL}/subnetcidrs/${this.props.match.params.id}`)).json();\r\n      subnetCidr.touched = {\r\n        subnetCidr: false,\r\n        cidrId: false\r\n      };\r\n\r\n      this.setState({item: subnetCidr});\r\n    }\r\n    else {\r\n      const cidr = await (await fetch(`${API_BASE_URL}/cidrs/${this.props.match.params.idc}`)).json();\r\n      const subnetCidr = {\r\n        subnetCidr: '',\r\n        text: '',\r\n        cidr: '',\r\n        subnet: {},\r\n        touched: {\r\n          subnetCidr: false,\r\n          cidrId: false\r\n        }\r\n      };\r\n      subnetCidr.cidr = cidr;\r\n      subnetCidr.touched = {\r\n        subnetCidr: false,\r\n        cidrId: false\r\n      };\r\n      this.setState({item: subnetCidr});\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    item.touched = {\r\n        subnetCidr: true,\r\n        cidrId: true\r\n    };\r\n    const errors = this.validate(item.subnetCidr, item.cidrId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    if(isDisabled) \r\n    {\r\n      this.forceUpdate();\r\n      return;\r\n    }\r\n    const hist= API_BASE_URL + '/vpcmanages/' + item.cidr.id + '/subnetmanage'; // /vpcmanages/:idc/subnetmanage/:id\r\n\r\n    \r\n    \r\n    let t = 0;\r\n\r\n    if(item.id && item.subnet && item.subnet.id) {\r\n        //console.log(\"subnet\");\r\n        t = item.subnet.id;\r\n        item.subnet= {};\r\n    }else {\r\n      item.subnet= null;\r\n    }\r\n    //console.log(\"subnet\" + item.subnet.id);\r\n\r\n    await fetch((item.id) ? API_BASE_URL + '/cidrs/' + (item.cidr.id) + '/subnetcidrs/'+(item.id) + '/subnet/' + (t) : API_BASE_URL + '/cidrs/' + item.cidr.id + '/subnetcidrs', {\r\n      method: (item.id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push(hist);\r\n  }\r\n\r\n  handleBlur = (field) => (evt) => {\r\n\r\n    let item = {...this.state.item};\r\n    item.touched= { ...this.state.item.touched, [field]: true};\r\n    this.setState({item});\r\n\r\n  }\r\n\r\n  validate(subnetCidr, cidrId) {\r\n\r\n    const errors = {\r\n      subnetCidr: '',\r\n      cidrId: ''\r\n    };\r\n    \r\n    if(this.state.item.touched.subnetCidr && subnetCidr.length === 0){\r\n      errors.subnetCidr = 'subnet should not be null';\r\n      return errors;\r\n    }\r\n    if(this.state.item.touched.subnetCidr && !cidrRegex({exact: true}).test(subnetCidr))\r\n    {\r\n      errors.subnetCidr = 'subnet should  be a cidr format';\r\n      return errors;\r\n    }\r\n    /*if(!this.state.item.id && this.state.item.touched.trigrammeId && trigrammeId.length === 0){\r\n      errors.trigrammeId = 'trigramme should not be null';\r\n      return errors;\r\n    }*/\r\n    return errors;\r\n  }\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit Subnet Cidr' : 'Add Subnet Cidr'}</h2>;\r\n    \r\n    const errors = this.validate(item.subnetCidr, item.cidrId);\r\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n    \r\n    const canc = API_BASE_URL + \"/vpcmanages/\" + item.cidr.id + \"/subnetmanage\"; // /vpcmanages/:idc/subnetmanage/:id\r\n\r\n    let cidrs = null;\r\n    cidrs = <FormGroup>\r\n            <Label for=\"cidrId\">Cidr: {item.cidr.cidr}</Label>\r\n            <Input type=\"text\" name=\"cidrId\" id=\"cidrId\" value={item.cidr.id || ''} disabled={true}/>\r\n          </FormGroup>;\r\n\r\n    let isDisabledd = false;\r\n    if(item.subnet && item.subnet.id) isDisabledd = true;\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"subnetCidr\">Subnet</Label>\r\n            <Input type=\"text\" name=\"subnetCidr\" id=\"subnetCidr\" value={item.subnetCidr || ''}\r\n                   onChange={this.handleChange} onBlur={this.handleBlur('subnetCidr')} autoComplete=\"subnetCidr\"\r\n                    valid={errors.subnetCidr === ''}\r\n                   invalid={errors.subnetCidr !== ''}\r\n                   disabled={isDisabledd}\r\n            />\r\n            <FormFeedback>{errors.subnetCidr}</FormFeedback>\r\n          </FormGroup>\r\n\t\t  \r\n\t\t  {cidrs}\r\n\t\t  \r\n\t\t     <FormGroup>\r\n            <Label for=\"text\">Description</Label>\r\n            <Input type=\"text\" name=\"text\" id=\"text\" value={item.text || ''}\r\n                   onChange={this.handleChange} autoComplete=\"text\"/>\r\n          </FormGroup>\r\n\t\t  \r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\" disabled={isDisabled}>Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to={canc}>Cancel</Button>\r\n\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(SubnetManageEdit);"]},"metadata":{},"sourceType":"module"}